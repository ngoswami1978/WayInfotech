USE [AAMS]
GO

/****** Object:  UserDefinedFunction [dbo].[xerr]    Script Date: 04/28/2011 15:47:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






/*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [xerr]
PURPOSE: THIS FUNCTION WILL  RETUEN ERROR MESSAGE IN FORM OF XML 
SL.NO.  DATE		DEVELOPER’S NAME		ACTIVITY						
1.	    09/03/2008  NEERAJ GOSWAMI          CREATION					
*/


CREATE FUNCTION [dbo].[xerr] (@OutputTag VARCHAR(100),@err_code VARCHAR(20), @err_msg VARCHAR(1000) )
-- Output
RETURNS XML 
/* updated document
<Errors Status="FALSE"><Error Code="" Description="" /></Errors>
************************************************************************************/

AS
BEGIN 
DECLARE @xmsg XML 
DECLARE @ErrorOutPut Varchar(1000)
-- Initialize the document if needed
SET @ErrorOutPut = '<' + @OutputTag + '>' + '<Errors><Error></Error></Errors>' + '</' + @OutputTag + '>'

--SET @xmsg = '<Errors><Error></Error></Errors>'
SET @xmsg = CAST(@ErrorOutPut AS XML)


IF (LEN(@err_msg)= 0)  OR (LEN(@err_code)=0)
BEGIN
		-- Insert this error sequentially 
		SET @xmsg.modify('insert attribute Status {"FALSE"} into (//Errors)[1]')
		SET @xmsg.modify('
		insert	(
					attribute Code {sql:variable("@err_code")},
					attribute Description {sql:variable("@err_msg")}
				) 
		into (//Errors/Error)[1]' )
END
ELSE
BEGIN
		SET @xmsg.modify('insert attribute Status {"TRUE"} into (//Errors)[1]')
		SET @xmsg.modify('
		insert	(
					attribute Code {sql:variable("@err_code")},
					attribute Description {sql:variable("@err_msg")}
				) 
		into (//Errors/Error)[1]' )
END

-- Return the result of the function
RETURN @xmsg
END

--Execute Function
/*
declare @b xml
-- If show Error 
select @b = [dbo].[xerr]('','101','Error While Opening records')
-- If Not show Error 
--select @b = [dbo].[xerr]('','')
select @b
*/





GO

/****** Object:  UserDefinedFunction [dbo].[ufn_GetFirstDayOfQuarter]    Script Date: 04/28/2011 15:47:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ufn_GetFirstDayOfQuarter] ( @pInputDate    DATETIME )
RETURNS DATETIME
BEGIN

    DECLARE @vOutputDate        DATETIME

    SET @vOutputDate = CAST(YEAR(@pInputDate) AS VARCHAR(4)) + ' ' +
                       CASE WHEN MONTH(@pInputDate) IN ( 1,  2,  3) THEN 'JAN'
                            WHEN MONTH(@pInputDate) IN ( 4,  5,  6) THEN 'APR'
                            WHEN MONTH(@pInputDate) IN ( 7,  8,  9) THEN 'JUL'
                            WHEN MONTH(@pInputDate) IN (10, 11, 12) THEN 'OCT'
                       END

    RETURN @vOutputDate

END

GO

/****** Object:  UserDefinedFunction [dbo].[SPLIT_CONCATINATE]    Script Date: 04/28/2011 15:47:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[SPLIT_CONCATINATE] (
@STRINGTOSPLIT VARCHAR(2048),
@SEPARATOR VARCHAR(128))
RETURNS VARCHAR(500)
AS 
BEGIN
DECLARE @STR_CONCATINATE VARCHAR(500)

DECLARE @TEMPTABLE TABLE 
(
	FIELD1 VARCHAR(500)	
)

DECLARE @TEMPTABLE1 TABLE 
(
	FIELD1 VARCHAR(500)	
)

	WITH INDICES AS
	(
	SELECT 0 S, 1 E
	UNION ALL
	SELECT E, CHARINDEX(@SEPARATOR, @STRINGTOSPLIT, E) + LEN(@SEPARATOR)
	FROM INDICES
	WHERE E > S
	)
	INSERT INTO @TEMPTABLE (FIELD1)  
	SELECT SUBSTRING(@STRINGTOSPLIT,S, CASE WHEN E > LEN(@SEPARATOR) THEN E-S-LEN(@SEPARATOR) ELSE LEN(@STRINGTOSPLIT) - S + 1 END) STRING 
	FROM INDICES WHERE S >0	

	INSERT INTO @TEMPTABLE1 (FIELD1)
	SELECT (SELECT CAST(FIELD1 AS VARCHAR(20)) + ',' AS [text()] FROM (SELECT FIELD1= NIDT.NIDT_FIELDS_NAME FROM T_INC_NIDT_FIELDS NIDT , @TEMPTABLE TEMP WHERE NIDT.NIDT_FIELDS_CATEGORYSUB_ID = TEMP.FIELD1 ) AS PL FOR XML PATH(''))

	SELECT @STR_CONCATINATE = FIELD1 FROM @TEMPTABLE1
 
	RETURN @STR_CONCATINATE

END
 

GO

/****** Object:  UserDefinedFunction [dbo].[LastDayOfMonth]    Script Date: 04/28/2011 15:47:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[LastDayOfMonth]
( @EDate datetime )
RETURNS datetime
AS
BEGIN
    RETURN (CASE WHEN MONTH(@EDate)= 12
        THEN DATEADD(day,-1,CAST('01/01/'
        +STR(YEAR(@EDate)+1) AS DateTime))
        ELSE DATEADD(day,-1,CAST(STR(MONTH(@EDate)+1)
        +'/01/'+STR(YEAR(@EDate)) AS DateTime))
    END)
END

GO

/****** Object:  UserDefinedFunction [dbo].[FN_RETURNQUERY_MONTH]    Script Date: 04/28/2011 15:48:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO








 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_RETURNQUERY_MONTH]
PURPOSE: THIS FUNCTION CONVERTS DATE TO THE FORMAT (DD-MON-YY HH(24):MI, DD-MM-YY HH24:MI)
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |16/04/2008  |NEERAJ GOSWAMI       |CREATION					|
|-----------------------------------------------------------------------|

SELECT DBO.FN_RETURNQUERY_MONTH('2007-04-16','2008-04-16')
*/

 

CREATE FUNCTION [dbo].[FN_RETURNQUERY_MONTH]
(          
   @FDATE DATETIME,
   @TDATE DATETIME   
)
RETURNS VARCHAR(500)

AS
BEGIN
DECLARE @FMONTH SMALLINT		
DECLARE @TMONTH SMALLINT		
DECLARE @FYEAR SMALLINT			
DECLARE @TYEAR SMALLINT			
DECLARE @FYEAR1 SMALLINT		
DECLARE @TYEAR1 SMALLINT		
DECLARE @MYEAR INTEGER 		
DECLARE @MSTRQRY Varchar(100)
DECLARE @RETQUERY VARCHAR(500) 		

SELECT @FMONTH =CONVERT(SMALLINT,MONTH(@FDATE)) 
SELECT @TMONTH =CONVERT(SMALLINT,MONTH(@TDATE)) 
SELECT @FYEAR  = CONVERT(SMALLINT,YEAR(@FDATE)) 
SELECT @TYEAR  =CONVERT(SMALLINT,YEAR(@TDATE)) 
SELECT @FYEAR1 = CONVERT(SMALLINT,YEAR(@FDATE)) 
SELECT @TYEAR1 =CONVERT(SMALLINT,YEAR(@TDATE)) 


SET @MSTRQRY ='('
-- FIRST
	IF @FYEAR <= @TYEAR 
	BEGIN
		IF @FYEAR = @TYEAR 
			BEGIN
				SELECT @RETQUERY = ' ( MONTH BETWEEN ' + CONVERT(VARCHAR(2),@FMONTH) + ' AND ' + CONVERT(VARCHAR(2),@TMONTH) + ' AND YEAR  = ' + CONVERT(VARCHAR(4),@FYEAR) + ' ) '  
			END
		ELSE
			BEGIN
				SELECT @RETQUERY = ' ( MONTH BETWEEN ' + CONVERT(VARCHAR(2),@FMONTH) + ' AND 12 AND YEAR  = ' + CONVERT(VARCHAR(4),@FYEAR) + ' ) '  
			END

		IF @FYEAR <> @TYEAR 
		BEGIN

		WHILE @FYEAR1  < @TYEAR1 -1
		BEGIN
			SELECT @MYEAR = @FYEAR1 + 1
			SELECT @MSTRQRY = @MSTRQRY  + CONVERT(VARCHAR(5),@MYEAR) + ','	
			SET @FYEAR1 = @FYEAR1 + 1
		END 
			SELECT @MSTRQRY = LEFT(@MSTRQRY,LEN(@MSTRQRY)-1)
			SELECT @MSTRQRY = @MSTRQRY  + ' )'			
		
		IF LEN(LTRIM(RTRIM(@MSTRQRY))) > 1 
			BEGIN
				SELECT @RETQUERY = @RETQUERY + ' OR  ( MONTH BETWEEN 1  AND 12 AND YEAR  IN ' + @MSTRQRY 	
				SELECT @RETQUERY = @RETQUERY + ' OR  ( MONTH BETWEEN 1  AND  ' +  CONVERT(VARCHAR(2),@TMONTH ) + ' AND YEAR = '  + CONVERT(VARCHAR(4),@TYEAR ) + ' ))' 
			END
		ELSE
			SELECT @RETQUERY = @RETQUERY + ' OR  ( MONTH BETWEEN 1  AND  ' +  CONVERT(VARCHAR(2),@TMONTH ) + ' AND YEAR = '  + CONVERT(VARCHAR(4),@TYEAR ) + ' )' 
			
		END		
	END
	RETURN @RETQUERY
END




















GO

/****** Object:  UserDefinedFunction [dbo].[FN_ISVALIDBILLING_MONTHYEAR]    Script Date: 04/28/2011 15:48:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*

DECLARE @TEMP TABLE
	(
		[DATE] DATETIME,
		[MONTH] INT ,
		[YEAR] INT	
	)


	--DEFINE LIMITS

	DECLARE @TODATE DATETIME, @FROMDATE DATETIME   
	--SET @FROMDATE = DATEADD(MONTH,3,'2008-02-01')

	SET @FROMDATE = '2008-08-05'
	SET @TODATE = '2012-08-22'  
	  
	;WITH DATESEQUENCE( [DATE] ) AS  
	(   
		SELECT @FROMDATE AS [DATE]   
			UNION ALL  
		SELECT DATEADD(MONTH, 3, [DATE])   
			FROM DATESEQUENCE   
			WHERE DATE < @TODATE   
	)   
	  
	--SELECT RESULT 
	INSERT INTO  @TEMP ([DATE] ,[MONTH],
	[YEAR] )
	SELECT  DISTINCT
	[DATE] AS [DATE],   
	DATEPART(MONTH,[DATE]) AS [MONTH],   
	DATEPART(YEAR,[DATE]) AS [YEAR]   
	FROM DATESEQUENCE OPTION (MAXRECURSION 10000)  

	SELECT * FROM @TEMP 

	IF EXISTS(SELECT * FROM @TEMP WHERE MONTH =2 AND YEAR =2009)
	BEGIN
		SELECT 1
	END
	ELSE
	BEGIN
		SELECT 0 
	END	

*/




  
 /*        
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.        
'********************************************************************************************        
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART        
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE        
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS        
'********************************************************************************************        
NAME: [FN_ISBILLING_MONTH]  
PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT  
|--------|--------------------------------------------------------------|  
|SL. NO. |DATE    |DEVELOPER’S NAME  |ACTIVITY     |  
|-----------------------------------------------------------------------|  
|1.   |20/09/2008  |NEERAJ GOSWAMI       |CREATION     |  
|-----------------------------------------------------------------------|  

SELECT DBO.[FN_ISVALIDBILLING_MONTHYEAR]('2008-02-01','2009-05-01' ,4,2008,'Q')  


DECLARE @STARTDATE DATETIME  
DECLARE @BILLINGDATE DATETIME
DECLARE @TODATE DATETIME, @FROMDATE DATETIME   

SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),20080805))
SET @BILLINGDATE = CONVERT(DATETIME,CONVERT(VARCHAR(12),20120822))

--SET @FROMDATE = DATEADD(MONTH,3,CAST(@STARTDATE AS DATETIME))
SET @FROMDATE = CAST(@STARTDATE AS DATETIME)

SET @TODATE = CAST(@BILLINGDATE AS DATETIME)
SELECT 	@FROMDATE	
SELECT @TODATE

SELECT DBO.[FN_ISVALIDBILLING_MONTHYEAR](@FROMDATE,@TODATE ,4,2008,'Q')  


*/  
 
  
CREATE FUNCTION [dbo].[FN_ISVALIDBILLING_MONTHYEAR]
(            
   @STARTDATE DATETIME,  
   @BILLINGDATE DATETIME=NULL,
   @BILLINGMONTH INT=NULL,
   @BILLINGYEAR INT=NULL,		
   @TYPE CHAR(1)=NULL  
)  
RETURNS BIT   
AS  
BEGIN
DECLARE @ISBILLINGPERION BIT
DECLARE @TODATE DATETIME, @FROMDATE DATETIME   

DECLARE @TEMP TABLE
	(
		[DATE] DATETIME,
		[MONTH] INT ,
		[YEAR] INT	
	)

	IF @TYPE='Q'
	BEGIN
			--DEFINE LIMITS
			SET @FROMDATE = DATEADD(MONTH,3,CAST(@STARTDATE AS DATETIME))
			--SET @FROMDATE = CAST(@STARTDATE AS DATETIME)
			SET @TODATE = CAST(@BILLINGDATE AS DATETIME)
			
			  
			;WITH DATESEQUENCE( [DATE] ) AS  
			(   
				SELECT @FROMDATE AS [DATE]   
					UNION ALL  
				SELECT DATEADD(MONTH, 3, [DATE])   
					FROM DATESEQUENCE   
					WHERE DATE < @TODATE   
			)   
			  
			--SELECT RESULT 
			INSERT INTO  @TEMP ([DATE] ,[MONTH],
			[YEAR] )
			SELECT  DISTINCT
			[DATE] AS [DATE],   
			DATEPART(MONTH,[DATE]) AS [MONTH],   
			DATEPART(YEAR,[DATE]) AS [YEAR]   
			FROM DATESEQUENCE OPTION (MAXRECURSION 10000)  

			IF EXISTS (SELECT * FROM @TEMP WHERE MONTH =@BILLINGMONTH AND YEAR =@BILLINGYEAR)
			BEGIN
				SET @ISBILLINGPERION=1	
			END
			ELSE
			BEGIN
				SET @ISBILLINGPERION=0	
			END			
	END	
	IF @TYPE='Y'
	BEGIN
			--DEFINE LIMITS
			SET @FROMDATE = DATEADD(MONTH,12,CAST(@STARTDATE AS DATETIME))
			--SET @FROMDATE = CAST(@STARTDATE AS DATETIME)
			SET @TODATE = CAST(@BILLINGDATE AS DATETIME)
			
			  
			;WITH DATESEQUENCE( [DATE] ) AS  
			(   
				SELECT @FROMDATE AS [DATE]   
					UNION ALL  
				SELECT DATEADD(MONTH, 12, [DATE])   
					FROM DATESEQUENCE   
					WHERE DATE < @TODATE   
			)   
			  
			--SELECT RESULT 
			INSERT INTO  @TEMP ([DATE] ,[MONTH],
			[YEAR] )
			SELECT  DISTINCT
			[DATE] AS [DATE],   
			DATEPART(MONTH,[DATE]) AS [MONTH],   
			DATEPART(YEAR,[DATE]) AS [YEAR]   
			FROM DATESEQUENCE OPTION (MAXRECURSION 10000)  

			IF EXISTS (SELECT * FROM @TEMP WHERE MONTH =@BILLINGMONTH AND YEAR =@BILLINGYEAR)
			BEGIN
				SET @ISBILLINGPERION=1	
			END
			ELSE
			BEGIN
				SET @ISBILLINGPERION=0	
			END			
	END	
	IF @TYPE='H'
	BEGIN
			--DEFINE LIMITS
			SET @FROMDATE = DATEADD(MONTH,6,CAST(@STARTDATE AS DATETIME))
			--SET @FROMDATE = CAST(@STARTDATE AS DATETIME)
			SET @TODATE = CAST(@BILLINGDATE AS DATETIME)
			
			  
			;WITH DATESEQUENCE( [DATE] ) AS  
			(   
				SELECT @FROMDATE AS [DATE]   
					UNION ALL  
				SELECT DATEADD(MONTH, 6, [DATE])   
					FROM DATESEQUENCE   
					WHERE DATE < @TODATE   
			)   
			  
			--SELECT RESULT 
			INSERT INTO  @TEMP ([DATE] ,[MONTH],
			[YEAR] )
			SELECT  DISTINCT
			[DATE] AS [DATE],   
			DATEPART(MONTH,[DATE]) AS [MONTH],   
			DATEPART(YEAR,[DATE]) AS [YEAR]   
			FROM DATESEQUENCE OPTION (MAXRECURSION 10000)  

			IF EXISTS (SELECT * FROM @TEMP WHERE MONTH =@BILLINGMONTH AND YEAR =@BILLINGYEAR)
			BEGIN
				SET @ISBILLINGPERION=1	
			END
			ELSE
			BEGIN
				SET @ISBILLINGPERION=0	
			END			
	END	
   RETURN @ISBILLINGPERION
END  


GO

/****** Object:  UserDefinedFunction [dbo].[FN_ISVALID_NO_OF_PAYMENTS]    Script Date: 04/28/2011 15:48:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[FN_ISVALID_NO_OF_PAYMENTS]
(            
   @BC_EFFECTIVE_FROM INT=NULL,  
   @BC_VALID_TILL INT=NULL,
   @PAYMENT_CYCLE_ID INT=NULL,
   @NO_OF_PAYMENTS INT=NULL
)  
RETURNS int   
AS  
BEGIN
	DECLARE @VALID int
	DECLARE @VALID_NO_OF_PAYMENTS INT,@BCDURATION INT,@PAYMENT_CYCLE_NAME VARCHAR(50)
	IF isnull(@NO_OF_PAYMENTS,0)=0 
		BEGIN
			SET @VALID=1
		END
	ELSE
		BEGIN
			SELECT @BCDURATION=(DATEDIFF(M,CONVERT(DATETIME,CONVERT(VARCHAR(12),@BC_EFFECTIVE_FROM)),CONVERT(DATETIME,CONVERT(VARCHAR(12),@BC_VALID_TILL))))+1
			SELECT @PAYMENT_CYCLE_NAME=PAYMENT_CYCLE_NAME FROM T_INC_BC_PAYMENT_CYCLE WHERE PAYMENT_CYCLE_ID=@PAYMENT_CYCLE_ID

			SELECT @VALID_NO_OF_PAYMENTS=@BCDURATION/
				CASE 
				WHEN @PAYMENT_CYCLE_NAME='ANNUAL' THEN 12
				WHEN @PAYMENT_CYCLE_NAME='BI-ANNUAL' THEN 6
				WHEN @PAYMENT_CYCLE_NAME='QTRLY' THEN 3
				WHEN @PAYMENT_CYCLE_NAME='MONTHLY' THEN 1 END
			SET @VALID_NO_OF_PAYMENTS=@VALID_NO_OF_PAYMENTS-1
			IF @VALID_NO_OF_PAYMENTS >=@NO_OF_PAYMENTS 
				BEGIN
					SET @VALID=1
				END
			ELSE
				BEGIN
					SET @VALID=0
				END

		END
	RETURN @VALID
END






GO

/****** Object:  UserDefinedFunction [dbo].[fn_IsLeapYear]    Script Date: 04/28/2011 15:48:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*        
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.        
'********************************************************************************************        
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART        
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE        
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS        
'********************************************************************************************        
NAME: [dbo.fn_IsLeapYear]  
PURPOSE: THIS PROCEDURE WILL  INSERT/UPDATE/DELETE/VIEW THE REQUIRED ELEMENT.        
|--------|--------------------------------------------------------------|  
|SL. NO. |DATE    |DEVELOPER’S NAME  |ACTIVITY     |  
|-----------------------------------------------------------------------|  
|1.   |30/06/2008  |ASHISH KUMAR SRIVASTAVA           |CREATION     |  
|-----------------------------------------------------------------------|  
Use to check Leap Year
*/  


CREATE function [dbo].[fn_IsLeapYear] (@year int)
returns bit
as
begin
    return(select case datepart(mm, dateadd(dd, 1, cast((cast(@year as varchar(4)) + '0228') as datetime))) 
    when 2 then 1 
    else 0 
    end)
end



GO

/****** Object:  UserDefinedFunction [dbo].[FN_ISBILLING_MONTH]    Script Date: 04/28/2011 15:48:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_ISBILLING_MONTH]
PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |20/09/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/
--SELECT DBO.[FN_ISBILLING_MONTH](5,4,'Q')

CREATE FUNCTION [dbo].[FN_ISBILLING_MONTH]
(          
   @STARTMONTH INT,
   @BILLINGMONTH INT=NULL,
   @TYPE CHAR(1)=NULL
)
RETURNS BIT 
AS
BEGIN
        DECLARE @ISBILLING BIT    
	    IF @TYPE='Q'
			BEGIN
				DECLARE @BILLINGQUARTER_1 AS TINYINT
				DECLARE @BILLINGQUARTER_2 AS TINYINT
				DECLARE @BILLINGQUARTER_3 AS TINYINT
				DECLARE @BILLINGQUARTER_4 AS TINYINT
				SET @BILLINGQUARTER_1=@STARTMONTH

				IF (@BILLINGQUARTER_1+3) > 12
					BEGIN 
						SET @BILLINGQUARTER_2= (@BILLINGQUARTER_1+3) - 12
					END
				ELSE
					BEGIN
						SET @BILLINGQUARTER_2= (@BILLINGQUARTER_1+3)
					END
				IF (@BILLINGQUARTER_2+3) > 12
					BEGIN 
						SET @BILLINGQUARTER_3= (@BILLINGQUARTER_2+3) - 12
					END
				ELSE
					BEGIN
						SET @BILLINGQUARTER_3= (@BILLINGQUARTER_2+3)
					END

				IF (@BILLINGQUARTER_3+3) > 12
					BEGIN 
						SET @BILLINGQUARTER_4= (@BILLINGQUARTER_3+3) - 12
					END
				ELSE
					BEGIN
						SET @BILLINGQUARTER_4= (@BILLINGQUARTER_3+3)
					END
				IF @BILLINGQUARTER_1=@BILLINGMONTH OR @BILLINGQUARTER_2=@BILLINGMONTH OR @BILLINGQUARTER_3=@BILLINGMONTH OR @BILLINGQUARTER_4=@BILLINGMONTH 
					BEGIN
						SET @ISBILLING =1					
					END
				ELSE
					BEGIN
						SET @ISBILLING =0					
					END
			END
		IF @TYPE='H'			
			BEGIN				
				DECLARE @FIRSTHALF TINYINT
				DECLARE @SECONDHALF TINYINT
				SET @FIRSTHALF=@STARTMONTH
				IF (@FIRSTHALF + 6) > 12 
					BEGIN
						SET @SECONDHALF=(@FIRSTHALF + 6) - 12
					END
				ELSE
					BEGIN
						SET @SECONDHALF=@FIRSTHALF + 6 
					END

				IF @FIRSTHALF=@BILLINGMONTH OR @SECONDHALF=@BILLINGMONTH
					BEGIN
						SET @ISBILLING =1					
					END
				ELSE
					BEGIN
						SET @ISBILLING =0					
					END

			END
			IF @TYPE='Y'					
			BEGIN
			   IF @STARTMONTH = @BILLINGMONTH 
				  BEGIN
					SET @ISBILLING =1
				  END	
				ELSE
				  BEGIN
					SET @ISBILLING =0
				  END
			END
			RETURN @ISBILLING

END









GO

/****** Object:  UserDefinedFunction [dbo].[FN_INC_RETURN_PLAN_RATE]    Script Date: 04/28/2011 15:48:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
PRODUCTIVITY_CODD_PK_HX,INTL,S2_DOM_CODD_PK_HX,9W_DOM_CODD_PK_HX,
SELECT DBO.FN_INC_RETURN_PLAN_RATE(6,'PRODUCTIVITY_CODD_PK_HX',4102)
*/

CREATE FUNCTION  [dbo].[FN_INC_RETURN_PLAN_RATE]
(
	@BC_ID BIGINT,
	@NIDTFIELDNAME VARCHAR(8000),
	@NIDT_PROD BIGINT = 0,
	@PAYMENT_ID INT
)
RETURNS INT
AS

BEGIN
	DECLARE @INC_PLAN_ID INT 
	DECLARE @SLABS_RATE INT 
	DECLARE @P_SLABS_RATE INT

	SELECT @P_SLABS_RATE=CASE WHEN ISNULL(NIDT_RATE,0)=0 THEN   STANDARDRATE ELSE ISNULL(NIDT_RATE,0) END FROM T_INC_PAYMENT_NIDT_FIELDS_CONSOLIDATE WITH(NOLOCK) 
	WHERE PAYMENT_ID=@PAYMENT_ID   
	AND CHARINDEX(  DBO.[FN_MATCH_INPUT](@NIDTFIELDNAME) ,',' + NIDT_FIELDS_ID + ',') > 0
	RETURN ISNULL(@P_SLABS_RATE,0)
END

GO

/****** Object:  UserDefinedFunction [dbo].[FN_INC_RETURN_PAYMENTPERIOD]    Script Date: 04/28/2011 15:48:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


  
    
    
/*    
    
DECLARE @TEMP TABLE    
 (    
  [DATE] DATETIME,    
  [MONTH] INT ,    
  [YEAR] INT     
 )    
    
    
 --DEFINE LIMITS    
    
 DECLARE @TODATE DATETIME, @FROMDATE DATETIME       
 --SET @FROMDATE = DATEADD(MONTH,3,'2008-02-01')    
    
 SET @FROMDATE = '2008-08-05'    
 SET @TODATE = '2012-08-22'      
       
 ;WITH DATESEQUENCE( [DATE] ) AS      
 (       
  SELECT @FROMDATE AS [DATE]       
   UNION ALL      
  SELECT DATEADD(MONTH, 3, [DATE])       
   FROM DATESEQUENCE       
   WHERE DATE < @TODATE       
 )       
       
 --SELECT RESULT     
 INSERT INTO  @TEMP ([DATE] ,[MONTH],    
 [YEAR] )    
 SELECT  DISTINCT    
 [DATE] AS [DATE],       
 DATEPART(MONTH,[DATE]) AS [MONTH],       
 DATEPART(YEAR,[DATE]) AS [YEAR]       
 FROM DATESEQUENCE OPTION (MAXRECURSION 10000)      
    
 SELECT * FROM @TEMP     
    
 IF EXISTS(SELECT * FROM @TEMP WHERE MONTH =2 AND YEAR =2009)    
 BEGIN    
  SELECT 1    
 END    
 ELSE    
 BEGIN    
  SELECT 0     
 END     
    
*/    
    
    
    
    
      
 /*            
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.            
'********************************************************************************************            
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART            
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE            
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS            
'********************************************************************************************            
NAME: [FN_ISBILLING_MONTH]      
PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT      
|--------|--------------------------------------------------------------|      
|SL. NO. |DATE    |DEVELOPER’S NAME  |ACTIVITY     |      
|-----------------------------------------------------------------------|      
|1.   |20/09/2008  |NEERAJ GOSWAMI       |CREATION     |      
|-----------------------------------------------------------------------|      
    
    
--DEFINE     
SELECT * FROM SP_COLUMNS T_INC_BC_MASTER    
    
DECLARE @TEMP TABLE    
 (    
  [DATEFROM] DATETIME,    
  [DATETO] DATETIME,    
  [MONTH] INT ,    
  [YEAR] INT     
 )    
    
DECLARE @STARTDATE DATETIME      
DECLARE @STARTDATE1 DATETIME      
DECLARE @TODATE DATETIME, @FROMDATE DATETIME       
  
SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),20090828))    
SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),20090828))    
  
SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))  
PRINT @STARTDATE  
  
SET @FROMDATE = DATEADD(MONTH,3,CAST(@STARTDATE AS DATETIME))    
SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),20101118))    
SELECT @FROMDATE    
SELECT @TODATE    
  
      
;WITH DATESEQUENCE( [DATE] ) AS      
(       
 SELECT @FROMDATE AS [DATE]       
  UNION ALL      
 SELECT DATEADD(MONTH, 3, [DATE])       
  FROM DATESEQUENCE       
  WHERE DATE < @TODATE       
)       
INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])    
SELECT  DISTINCT    
[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-3,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-3,[DATE])) = YEAR(@STARTDATE1))) THEN  
 @STARTDATE1 ELSE DATEADD(MONTH,-3,[DATE]) END,  
[DATETO]  = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATE]) END,    
[MONTH] = CASE WHEN [DATE] > @TODATE THEN DATEPART(MONTH,@TODATE) ELSE DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,    
[YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END    
FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    
    
SELECT * FROM @TEMP    
  
SELECT dbo.[FN_INC_RETURN_PAYMENTPERIOD]('20090801','20100831','8','2009','M')    
    
*/      
     
      
CREATE FUNCTION [dbo].[FN_INC_RETURN_PAYMENTPERIOD]    
(                
   @EFFECTIVEDATE INT,      
   @ENDDATE INT=NULL,    
   @BILLINGMONTH INT=NULL,    
   @BILLINGYEAR INT=NULL,    
   @TYPE CHAR(1)=NULL      
)      
RETURNS VARCHAR(50)       
AS      
BEGIN    
DECLARE @ISBILLINGPERION BIT    
DECLARE @STARTDATE DATETIME     
DECLARE @STARTDATE1 DATETIME     
   
DECLARE @TODATE DATETIME, @FROMDATE DATETIME       
DECLARE @RETURNPERIOD VARCHAR(50)    
    
DECLARE @TEMP TABLE    
 (    
  [DATEFROM] DATETIME,    
  [DATETO] DATETIME,    
  [MONTH] INT ,    
  [YEAR] INT     
 )    
    
 IF @TYPE='Q'    
 BEGIN    
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))    
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))    
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))  
    
   SET @FROMDATE = DATEADD(MONTH,3,CAST(@STARTDATE AS DATETIME))    
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))    
    
   ;WITH DATESEQUENCE( [DATE] ) AS      
   (       
   SELECT @FROMDATE AS [DATE]       
   UNION ALL      
   SELECT DATEADD(MONTH, 3, [DATE])       
   FROM DATESEQUENCE       
   WHERE DATE < @TODATE       
   )     
    
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])    
   SELECT  DISTINCT    
   --DATEADD(MONTH,-3,[DATE]) AS [DATEFROM],    
   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-3,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-3,[DATE])) = YEAR(@STARTDATE1))) THEN  
   @STARTDATE1 ELSE DATEADD(MONTH,-3,[DATE]) END,  
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE    
   DATEADD(DAY,-1,[DATE]) END,    
   [MONTH] = CASE  WHEN [DATE] > @TODATE     
   THEN DATEPART(MONTH,@TODATE) ELSE    
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,    
   --DATEPART(YEAR,[DATE]) AS [YEAR]       
	[YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    
       
   SELECT @RETURNPERIOD= CAST([DATEFROM]AS VARCHAR(12)) + ' - ' + CAST([DATETO] AS VARCHAR(12)) FROM @TEMP    
   WHERE [MONTH] = @BILLINGMONTH AND [YEAR] = @BILLINGYEAR    
 END    
    
 IF @TYPE='Y'    
 BEGIN    
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))    
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))    
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))   
    
   SET @FROMDATE = DATEADD(MONTH,12,CAST(@STARTDATE AS DATETIME))    
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))    
    
   ;WITH DATESEQUENCE( [DATE] ) AS      
   (       
   SELECT @FROMDATE AS [DATE]       
   UNION ALL      
   SELECT DATEADD(MONTH, 12, [DATE])       
   FROM DATESEQUENCE       
   WHERE DATE < @TODATE       
   )     
    
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])    
   SELECT  DISTINCT    
   --DATEADD(MONTH,-12,[DATE]) AS [DATEFROM],    
   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-12,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-12,[DATE])) = YEAR(@STARTDATE1))) THEN  
   @STARTDATE1 ELSE DATEADD(MONTH,-12,[DATE]) END,  
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE    
   DATEADD(DAY,-1,[DATE]) END,    
   [MONTH] = CASE  WHEN [DATE] > @TODATE     
   THEN DATEPART(MONTH,@TODATE) ELSE    
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,    
   --DATEPART(YEAR,[DATE]) AS [YEAR]       
[YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    
       
   SELECT @RETURNPERIOD= CAST([DATEFROM]AS VARCHAR(12)) + ' - ' + CAST([DATETO] AS VARCHAR(12)) FROM @TEMP    
   WHERE [MONTH] = @BILLINGMONTH AND [YEAR] = @BILLINGYEAR    
    
 END     
 IF @TYPE='H'    
 BEGIN    
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))    
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))    
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))  
    
   SET @FROMDATE = DATEADD(MONTH,6,CAST(@STARTDATE AS DATETIME))    
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))    
    
 ;WITH DATESEQUENCE( [DATE] ) AS      
   (       
   SELECT @FROMDATE AS [DATE]       
   UNION ALL      
   SELECT DATEADD(MONTH, 6, [DATE])       
   FROM DATESEQUENCE       
   WHERE DATE < @TODATE       
   )     
    
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])    
   SELECT  DISTINCT    
   --DATEADD(MONTH,-6,[DATE]) AS [DATEFROM],    
   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-6,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-6,[DATE])) = YEAR(@STARTDATE1))) THEN  
   @STARTDATE1 ELSE DATEADD(MONTH,-6,[DATE]) END,  
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE    
   DATEADD(DAY,-1,[DATE]) END,    
   [MONTH] = CASE  WHEN [DATE] > @TODATE     
   THEN DATEPART(MONTH,@TODATE) ELSE    
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,    
   --DATEPART(YEAR,[DATE]) AS [YEAR]       
[YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    
       
   SELECT @RETURNPERIOD= CAST([DATEFROM]AS VARCHAR(12)) + ' - ' + CAST([DATETO] AS VARCHAR(12)) FROM @TEMP    
   WHERE [MONTH] = @BILLINGMONTH AND [YEAR] = @BILLINGYEAR     
 END      
 IF @TYPE='M'    
 BEGIN    
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))    
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))    
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))  
    
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))    
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))    
   --SELECT @FROMDATE    
   --SELECT @TODATE    
    
    
   ;WITH DATESEQUENCE( [DATE] ) AS      
   (       
   SELECT @FROMDATE AS [DATE]       
   UNION ALL      
   SELECT DATEADD(MONTH, 1, [DATE])       
   FROM DATESEQUENCE       
   WHERE DATE < @TODATE       
   )       
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])    
   SELECT  DISTINCT    
   --DATEADD(MONTH,-1,[DATE]) AS [DATEFROM],    
   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-1,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-1,[DATE])) = YEAR(@STARTDATE1))) THEN  
   @STARTDATE1 ELSE DATEADD(MONTH,-1,[DATE]) END,  
   [DATE]  = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATE]) END,    
   [MONTH] = CASE WHEN [DATE] > @TODATE THEN DATEPART(MONTH,@TODATE) ELSE DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,    
   [YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END    
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    
       
   SELECT @RETURNPERIOD= CAST([DATEFROM]AS VARCHAR(12)) + ' - ' + CAST([DATETO] AS VARCHAR(12)) FROM @TEMP    
   WHERE [MONTH] = @BILLINGMONTH AND [YEAR] = @BILLINGYEAR     
    
 END     
    
RETURN @RETURNPERIOD     
END     


GO

/****** Object:  UserDefinedFunction [dbo].[FN_INC_RETURN_PAYMENT_SEQUENCE_UPFRONT]    Script Date: 04/28/2011 15:48:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

  
 /*                              
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.                          
'********************************************************************************************                          
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART                          
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE                          
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS                          
'********************************************************************************************                          
NAME: [FN_INC_RETURN_PAYMENT_SEQUENCE]                    
  
PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT                    
|-----------------------------------------------------------------------|                    
|SL. NO. |DATE   |DEVELOPER’S NAME |ACTIVITY      |                    
|-----------------------------------------------------------------------|                    
|1.   |04/09/2010 |NEERAJ GOSWAMI |CREATION      |                    
|-----------------------------------------------------------------------|                    
                  
SELECT * FROM T_INC_BC_MASTER  
SELECT * FROM T_INC_BC_PAYMENT_CYCLE

SELECT dbo.[FN_INC_RETURN_PAYMENT_SEQUENCE_UPFRONT]('20080102','20091231','Q',34,10,2009)
      
*/                    
                   
                    
CREATE FUNCTION [dbo].[FN_INC_RETURN_PAYMENT_SEQUENCE_UPFRONT]
(                              
   @EFFECTIVEDATE INT,                    
   @ENDDATE INT=NULL,                  
   @TYPE CHAR(1)=NULL,              
   @BC_ID INT=NULL,          
   @MONTH INT = NULL,          
   @YEAR INT = NULL          
)                    
RETURNS INT  
AS                    
BEGIN      
                  
DECLARE @ISBILLINGPERION BIT                  
DECLARE @STARTDATE DATETIME                   
DECLARE @STARTDATE1 DATETIME                   
DECLARE @TODATE DATETIME, @FROMDATE DATETIME                     
DECLARE @RETURNPERIOD VARCHAR(50)                  
DECLARE @RANG1 DATETIME              
DECLARE @RANG2 DATETIME              
DECLARE @BOOLFIRSTPAYMENTDATE BIT      
DECLARE @FIRSTPAYDATE INTEGER  
DECLARE @SEQUENCE INT  
              
DECLARE @TEMP TABLE                  
 (                  
  [DATEFROM] DATETIME,                  
  [DATETO] DATETIME,                  
  [MONTH] INT ,                  
  [YEAR] INT                   
 )             
 DECLARE @TEMPSEQUENCE TABLE                  
 (                  
  [DATEFROM] DATETIME,                  
  [DATETO] DATETIME,                  
  [MONTH] INT ,                  
  [YEAR] INT,  
  [SEQUENCE] INT  
 )    
  DECLARE @PAYTEMP TABLE                  
 (                  
  [DATEFROM] DATETIME,                  
  [DATETO] DATETIME,                  
  [MONTH] INT ,                  
  [YEAR] INT                   
 )   
        
 DECLARE @RANGETABLE TABLE          
 (          
  DATE DATETIME          
 )          
          
 IF @TYPE='Q'                  
 BEGIN      
              
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                  
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))              
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))               
                  
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))                  
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                  
                  
   ;WITH DATESEQUENCE( [DATETO] ) AS                    
   (                     
   SELECT @FROMDATE AS [DATETO]                     
   UNION ALL                    
   SELECT DATEADD(MONTH, 3, [DATETO])                     
   FROM DATESEQUENCE                     
   WHERE [DATETO] < @TODATE                     
   )                   
                  
	INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                  
	SELECT  DISTINCT
	[DATEFROM] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
	[DATETO]  = DATEADD(DAY,-1, DATEADD(MONTH,3, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,
	
   --[DATEFROM] = DATEADD(MONTH,-3,[DATETO]),
   --[DATETO] = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE  DATEADD(DAY,-1,[DATETO]) END,   
      
   [MONTH] = CASE  WHEN [DATETO] > @TODATE                   
   THEN DATEPART(MONTH,@TODATE) ELSE                  
   DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,                  
   [YEAR] = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END                     
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)                  
     
   SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP  
   INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR]) SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP  
     
   --SELECT @RANG1,@RANG2  
     
 INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))  
   
 INSERT INTO @TEMPSEQUENCE ([DATEFROM] ,[DATETO] , [MONTH], [YEAR],[SEQUENCE])   
 SELECT [DATEFROM] ,[DATETO] , [MONTH], [YEAR] , ROW_NUMBER() OVER(order by year,month asc) AS 'RowNumber' FROM @TEMP   
  
    
 IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)            
 BEGIN              
   --SET @BOOLFIRSTPAYMENTDATE =  0              
   SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE  WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH  
 END              
 ELSE              
 BEGIN    
  IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)  
  BEGIN  
   --SET @BOOLFIRSTPAYMENTDATE = 0    
   SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH        
  END  
  ELSE  
  BEGIN  
   SET @SEQUENCE = 1  
  END     
 END                  
END  
                  
 IF @TYPE='Y'                  
 BEGIN                  
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                  
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                  
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))                 
                  
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))                  
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                  
                  
   ;WITH DATESEQUENCE( [DATETO] ) AS                    
   (                     
   SELECT @FROMDATE AS [DATETO]                     
   UNION ALL                    
   SELECT DATEADD(MONTH, 12, [DATETO])                     
   FROM DATESEQUENCE                     
   WHERE [DATETO] < @TODATE                     
   )                   
                  
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                  
   SELECT  DISTINCT                  
   
   --[DATEFROM] =DATEADD(MONTH,-12,[DATETO]) ,                     
   --[DATETO] = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END,              
   
   [DATEFROM] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
   [DATETO] = DATEADD(DAY,-1, DATEADD(MONTH,12, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,

       
   [MONTH] = CASE  WHEN [DATETO] > @TODATE                   
   THEN DATEPART(MONTH,@TODATE) ELSE                  
   DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,                  
   [YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END                     
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)                  
              
 SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  DATEADD(MONTH,-1,[DATETO])  FROM @TEMP      
 INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR]) SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP          
              
 --SELECT @RANG1,@RANG2              
               
          
 INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))          
   
 INSERT INTO @TEMPSEQUENCE ([DATEFROM] ,[DATETO] , [MONTH], [YEAR],[SEQUENCE])   
 SELECT [DATEFROM] ,[DATETO] , [MONTH], [YEAR] , ROW_NUMBER() OVER(order by year,month asc) AS 'RowNumber' FROM @TEMP   
  
           
 IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)            
 BEGIN              
   --SET @SEQUENCE =  0              
   SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH   
 END              
 ELSE              
 BEGIN    
  IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)  
  BEGIN  
   --SET @SEQUENCE = 0    
   SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH   
  END  
  ELSE  
  BEGIN  
   SET @SEQUENCE = 1  
  END     
 END  
                  
 END                   
 IF @TYPE='H'                  
 BEGIN                  
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                  
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                  
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))                
                  
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))                  
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                  
                  
 ;WITH DATESEQUENCE( [DATETO] ) AS                    
   (                     
   SELECT @FROMDATE AS [DATETO]                     
   UNION ALL                    
   SELECT DATEADD(MONTH, 6, [DATETO])                     
   FROM DATESEQUENCE                     
   WHERE [DATETO] < @TODATE                     
   )                   
                  
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                  
   SELECT  DISTINCT                  
   --[DATEFROM] = DATEADD(MONTH,-6,[DATETO]) ,                     
   --[DATETO] = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END,                  
   
   [DATEFROM] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
   [DATEFROM] = DATEADD(DAY,-1, DATEADD(MONTH,6, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,


   [MONTH] = CASE  WHEN [DATETO] > @TODATE                   
   THEN DATEPART(MONTH,@TODATE) ELSE                  
   DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,                  
   [YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END                     
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)      
              
 --SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  DATEADD(MONTH,-1,[DATETO])  FROM @TEMP              
   
 SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP              
 INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR]) SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP  
          
 INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))  
   
 INSERT INTO @TEMPSEQUENCE ([DATEFROM] ,[DATETO] , [MONTH], [YEAR],[SEQUENCE])   
 SELECT [DATEFROM] ,[DATETO] , [MONTH], [YEAR] , ROW_NUMBER() OVER(order by year,month asc) AS 'RowNumber' FROM @TEMP   
           
 IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)            
 BEGIN              
 --SET @SEQUENCE =  0              
 SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH     
 END              
 ELSE              
 BEGIN    
  IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)  
  BEGIN  
   --SET @SEQUENCE = 0    
   SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH   
  END  
  ELSE  
  BEGIN  
   SET @SEQUENCE = 1  
  END     
 END                  
              
 END                    
   
   
 IF @TYPE='M'                  
 BEGIN                  
 SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                  
 SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                  
 SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))                
               
 SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))                  
 SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))      
               
 ;WITH DATESEQUENCE( [DATETO] ) AS                    
 (                     
 SELECT @FROMDATE AS [DATETO]                     
 UNION ALL                    
 SELECT DATEADD(MONTH, 1, [DATETO])                     
 FROM DATESEQUENCE                     
 WHERE [DATETO] < @TODATE                     
 )                     
 INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                  
 SELECT  DISTINCT                  
 
 --[DATEFROM] =  DATEADD(MONTH,-1,[DATETO]) ,                   
 --[DATETO]  = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END,                  
 
  [DATEFROM] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
  [DATETO] = DATEADD(DAY,-1, DATEADD(MONTH,1, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,
 
 [MONTH] = CASE WHEN [DATETO] > @TODATE THEN DATEPART(MONTH,@TODATE) ELSE DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,                  
 [YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END                  
 FROM DATESEQUENCE OPTION (MAXRECURSION 10000)      
                 
 SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP      
 INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR]) SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP  
 --SELECT @RANG1,@RANG2                           
 INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))          
   
 INSERT INTO @TEMPSEQUENCE ([DATEFROM] ,[DATETO] , [MONTH], [YEAR],[SEQUENCE])   
 SELECT [DATEFROM] ,[DATETO] , [MONTH], [YEAR] , ROW_NUMBER() OVER(order by year,month asc) AS 'RowNumber' FROM @TEMP   
  
   
 IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)            
 BEGIN              
   --SET @SEQUENCE =  0              
   SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH   
 END              
 ELSE              
 BEGIN    
  IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)  
  BEGIN  
   --SET @SEQUENCE = 0    
   SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH   
  END  
  ELSE  
  BEGIN  
   SET @SEQUENCE = 1  
  END     
 END                  
 END          
RETURN ISNULL(@SEQUENCE,0)  
END   
GO

/****** Object:  UserDefinedFunction [dbo].[FN_INC_RETURN_PAYMENT_SEQUENCE]    Script Date: 04/28/2011 15:48:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



 /*                            
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.                        
'********************************************************************************************                        
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART                        
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE                        
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS                        
'********************************************************************************************                        
NAME: [FN_INC_RETURN_PAYMENT_SEQUENCE]                  

PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT                  
|-----------------------------------------------------------------------|                  
|SL. NO. |DATE		 |DEVELOPER’S NAME	|ACTIVITY						|                  
|-----------------------------------------------------------------------|                  
|1.		 |04/09/2010 |NEERAJ GOSWAMI	|CREATION						|                  
|-----------------------------------------------------------------------|                  
                
SELECT * FROM T_INC_BC_MASTER
SELECT * FROM T_INC_BC_PAYMENT_CYCLE
SELECT dbo.[FN_INC_RETURN_PAYMENT_SEQUENCE]('20090701','20120630','Q',1,12,2009)
    
*/                  
                 
                  
CREATE FUNCTION [dbo].[FN_INC_RETURN_PAYMENT_SEQUENCE]
(                            
   @EFFECTIVEDATE INT,                  
   @ENDDATE INT=NULL,                
   @TYPE CHAR(1)=NULL,            
   @BC_ID INT=NULL,        
   @MONTH INT = NULL,        
   @YEAR INT = NULL        
)                  
RETURNS INT
AS                  
BEGIN    
                
DECLARE @ISBILLINGPERION BIT                
DECLARE @STARTDATE DATETIME                 
DECLARE @STARTDATE1 DATETIME                 
DECLARE @TODATE DATETIME, @FROMDATE DATETIME                   
DECLARE @RETURNPERIOD VARCHAR(50)                
DECLARE @RANG1 DATETIME            
DECLARE @RANG2 DATETIME            
DECLARE @BOOLFIRSTPAYMENTDATE BIT    
DECLARE @FIRSTPAYDATE INTEGER
DECLARE @SEQUENCE INT
            
DECLARE @TEMP TABLE                
 (                
  [DATEFROM] DATETIME,                
  [DATETO] DATETIME,                
  [MONTH] INT ,                
  [YEAR] INT                 
 )           
 DECLARE @TEMPSEQUENCE TABLE                
 (                
  [DATEFROM] DATETIME,                
  [DATETO] DATETIME,                
  [MONTH] INT ,                
  [YEAR] INT,
  [SEQUENCE] INT
 )  
  DECLARE @PAYTEMP TABLE                
 (                
  [DATEFROM] DATETIME,                
  [DATETO] DATETIME,                
  [MONTH] INT ,                
  [YEAR] INT                 
 ) 
      
 DECLARE @RANGETABLE TABLE        
 (        
  DATE DATETIME        
 )        
        
 IF @TYPE='Q'                
 BEGIN    
            
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))            
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))             
                
   SET @FROMDATE = DATEADD(MONTH,3,CAST(@STARTDATE AS DATETIME))                
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                
                
   ;WITH DATESEQUENCE( [DATE] ) AS                  
   (                   
   SELECT @FROMDATE AS [DATE]                   
   UNION ALL                  
   SELECT DATEADD(MONTH, 3, [DATE])                   
   FROM DATESEQUENCE                   
   WHERE DATE < @TODATE                   
   )                 
                
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
   SELECT  DISTINCT                
   [DATEFROM] = DATEADD(MONTH,-3,[DATE]),                
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-3,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-3,[DATE])) = YEAR(@STARTDATE1))) THEN @STARTDATE1 ELSE DATEADD(MONTH,-3,[DATE]) END,              
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE                
   DATEADD(DAY,-1,[DATE]) END,                
   [MONTH] = CASE  WHEN [DATE] > @TODATE                 
   THEN DATEPART(MONTH,@TODATE) ELSE                
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
   [YEAR] = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END                   
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)                
   
   SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP
   INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR])	SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP
   
   --SELECT @RANG1,@RANG2
   
	INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))
	
	INSERT INTO @TEMPSEQUENCE ([DATEFROM] ,[DATETO] , [MONTH], [YEAR],[SEQUENCE])	
	SELECT [DATEFROM] ,[DATETO] , [MONTH], [YEAR] , ROW_NUMBER() OVER(order by year,month asc) AS 'RowNumber' FROM @TEMP 

  
	IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)          
	BEGIN            
	  --SET @BOOLFIRSTPAYMENTDATE =  0            
	  SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE  WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH
	END            
	ELSE            
	BEGIN  
		IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)
		BEGIN
			--SET @BOOLFIRSTPAYMENTDATE = 0  
			SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH						
		END
		ELSE
		BEGIN
			SET @SEQUENCE = 1
		END		 
	END                
END
                
 IF @TYPE='Y'                
 BEGIN                
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))               
                
   SET @FROMDATE = DATEADD(MONTH,12,CAST(@STARTDATE AS DATETIME))                
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                
                
   ;WITH DATESEQUENCE( [DATE] ) AS                  
   (                   
   SELECT @FROMDATE AS [DATE]                   
   UNION ALL                  
   SELECT DATEADD(MONTH, 12, [DATE])                   
   FROM DATESEQUENCE                   
   WHERE DATE < @TODATE                   
   )                 
                
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
   SELECT  DISTINCT                
   [DATEFROM] =DATEADD(MONTH,-12,[DATE]) ,                
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-12,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-12,[DATE])) = YEAR(@STARTDATE1))) THEN @STARTDATE1 ELSE DATEADD(MONTH,-12,[DATE]) END,              
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE                
   DATEADD(DAY,-1,[DATE]) END,                
   [MONTH] = CASE  WHEN [DATE] > @TODATE                 
   THEN DATEPART(MONTH,@TODATE) ELSE                
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
   [YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END                   
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)                
            
	SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  DATEADD(MONTH,-1,[DATETO])  FROM @TEMP    
	INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR])	SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP        
            
 --SELECT @RANG1,@RANG2            
             
        
	INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))        
	
	INSERT INTO @TEMPSEQUENCE ([DATEFROM] ,[DATETO] , [MONTH], [YEAR],[SEQUENCE])	
	SELECT [DATEFROM] ,[DATETO] , [MONTH], [YEAR] , ROW_NUMBER() OVER(order by year,month asc) AS 'RowNumber' FROM @TEMP 

         
	IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)          
	BEGIN            
	  --SET @SEQUENCE =  0            
	  SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH	
	END            
	ELSE            
	BEGIN  
		IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)
		BEGIN
			--SET @SEQUENCE = 0  
			SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH	
		END
		ELSE
		BEGIN
			SET @SEQUENCE = 1
		END		 
	END
                
 END                 
 IF @TYPE='H'                
 BEGIN                
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))              
                
   SET @FROMDATE = DATEADD(MONTH,6,CAST(@STARTDATE AS DATETIME))                
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                
                
 ;WITH DATESEQUENCE( [DATE] ) AS                  
   (                   
   SELECT @FROMDATE AS [DATE]                   
   UNION ALL                  
   SELECT DATEADD(MONTH, 6, [DATE])                   
   FROM DATESEQUENCE                   
   WHERE DATE < @TODATE                   
   )                 
                
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
   SELECT  DISTINCT                
   [DATEFROM] = DATEADD(MONTH,-6,[DATE]) ,                
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-6,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-6,[DATE])) = YEAR(@STARTDATE1))) THEN   @STARTDATE1 ELSE DATEADD(MONTH,-6,[DATE]) END,              
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE                
   DATEADD(DAY,-1,[DATE]) END,                
   [MONTH] = CASE  WHEN [DATE] > @TODATE                 
   THEN DATEPART(MONTH,@TODATE) ELSE                
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
   [YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END                   
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    
            
 --SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  DATEADD(MONTH,-1,[DATETO])  FROM @TEMP            
 
	SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP            
	INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR])	SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP
        
	INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))
	
	INSERT INTO @TEMPSEQUENCE ([DATEFROM] ,[DATETO] , [MONTH], [YEAR],[SEQUENCE])	
	SELECT [DATEFROM] ,[DATETO] , [MONTH], [YEAR] , ROW_NUMBER() OVER(order by year,month asc) AS 'RowNumber' FROM @TEMP 
         
 IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)          
	BEGIN            
	--SET @SEQUENCE =  0            
	SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH			
	END            
	ELSE            
	BEGIN  
		IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)
		BEGIN
			--SET @SEQUENCE = 0  
			SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH	
		END
		ELSE
		BEGIN
			SET @SEQUENCE = 1
		END		 
	END                
            
 END                  
 
 
 IF @TYPE='M'                
 BEGIN                
	SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
	SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
	SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))              
	            
	SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))                
	SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))    
	            
	;WITH DATESEQUENCE( [DATE] ) AS                  
	(                   
	SELECT @FROMDATE AS [DATE]                   
	UNION ALL                  
	SELECT DATEADD(MONTH, 1, [DATE])                   
	FROM DATESEQUENCE                   
	WHERE DATE < @TODATE                   
	)                   
	INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
	SELECT  DISTINCT                
	[DATEFROM] =  DATEADD(MONTH,-1,[DATE]) ,                
	--[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-1,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-1,[DATE])) = YEAR(@STARTDATE1))) THEN  @STARTDATE1 ELSE DATEADD(MONTH,-1,[DATE]) END,              
	[DATE]  = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATE]) END,                
	[MONTH] = CASE WHEN [DATE] > @TODATE THEN DATEPART(MONTH,@TODATE) ELSE DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
	[YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END                
	FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    
               
	SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP    
	INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR])	SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP
	--SELECT @RANG1,@RANG2                         
	INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))        
	
	INSERT INTO @TEMPSEQUENCE ([DATEFROM] ,[DATETO] , [MONTH], [YEAR],[SEQUENCE])	
	SELECT [DATEFROM] ,[DATETO] , [MONTH], [YEAR] , ROW_NUMBER() OVER(order by year,month asc) AS 'RowNumber' FROM @TEMP 

 
	IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)          
	BEGIN            
	  --SET @SEQUENCE =  0            
	  SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH	
	END            
	ELSE            
	BEGIN  
		IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)
		BEGIN
			--SET @SEQUENCE = 0  
			SELECT @SEQUENCE= [SEQUENCE] FROM @TEMPSEQUENCE WHERE [YEAR]= @YEAR AND [MONTH] = @MONTH	
		END
		ELSE
		BEGIN
			SET @SEQUENCE = 1
		END		 
	END                

  
 END        
            
RETURN ISNULL(@SEQUENCE,0)
END 


GO

/****** Object:  UserDefinedFunction [dbo].[FN_INC_RETURN_BOOL_YEARENDSETTLEMENT]    Script Date: 04/28/2011 15:48:14 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

  
 /*                        
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.                        
'********************************************************************************************                        
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART                        
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE                        
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS                        
'********************************************************************************************                        
NAME: [FN_INC_RETURN_BOOL_YEARENDSETTLEMENT]                  
PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT                  
|--------|--------------------------------------------------------------|                  
|SL. NO. |DATE    |DEVELOPER’S NAME  |ACTIVITY     |                  
|-----------------------------------------------------------------------|                  
|1.   |20/09/2008  |NEERAJ GOSWAMI       |CREATION     |                  
|-----------------------------------------------------------------------|                           

SELECT DBO.[FN_INC_RETURN_BOOL_YEARENDSETTLEMENT](20080101,20101231,'Q',30,10,2009)
SELECT * FROM T_INC_BC_MASTER
                
*/                  
                 
                  
CREATE FUNCTION [dbo].[FN_INC_RETURN_BOOL_YEARENDSETTLEMENT]      
(                            
   @EFFECTIVEDATE INT,                  
   @ENDDATE INT=NULL,                
   @TYPE CHAR(1)=NULL,            
   @BC_ID INT=NULL,        
   @MONTH INT = NULL,        
   @YEAR INT = NULL        
)                  
RETURNS BIT                   
AS                  
BEGIN                
DECLARE @ISBILLINGPERION BIT                
DECLARE @STARTDATE DATETIME                 
DECLARE @STARTDATE1 DATETIME                 
               
DECLARE @TODATE DATETIME, @FROMDATE DATETIME                   
DECLARE @RETURNPERIOD VARCHAR(50)                
            
DECLARE @RANG1 DATETIME            
DECLARE @RANG2 DATETIME            
DECLARE @BOOLYEAREND BIT            
            
DECLARE @TEMPUP TABLE      
 (      
  [DATEFROM] DATETIME,      
  [DATETO] DATETIME,
  [DATEFROM_UPFRONT] DATETIME,
  [DATETO_UPFRONT] DATETIME,  
  [MONTH] INT ,      
  [YEAR] INT       ,
  ROWID INT IDENTITY (1,1)
 )      
                
DECLARE @TEMP TABLE                
 (                
  [DATEFROM] DATETIME,                
  [DATETO] DATETIME,                
  [MONTH] INT ,                
  [YEAR] INT   ,      
  ROWID INT IDENTITY (1,1)               
 )                
                
 DECLARE @RANGETABLE TABLE        
 (        
  DATE DATETIME        
 )        
 DECLARE @ROWID INT      
 DECLARE @TEMPMONTH INT      
 DECLARE @TEMPYEAR INT       
      
 SET @BOOLYEAREND = 0       
 
	--1	Upfront Payment
	--2	Post Payment
	DECLARE @INCTYPEID INT 
	SELECT @INCTYPEID = INC_TYPE_ID FROM T_INC_BC_MASTER WHERE BC_ID = @BC_ID	
	
        
 IF @TYPE='Q'                
 BEGIN            
            
	IF @INCTYPEID = 1
	BEGIN

	SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
	   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
	   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))    
	      
	   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))      
	   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))      
	      
	   ;WITH DATESEQUENCE( [DATETO] ) AS        
	   (         
	   SELECT @FROMDATE AS [DATETO]         
	   UNION ALL        
	   SELECT DATEADD(MONTH, 3, [DATETO])         
	   FROM DATESEQUENCE         
	   WHERE [DATETO] < @TODATE         
	   )       

	   INSERT INTO @TEMPUP([DATEFROM],[DATETO],[DATEFROM_UPFRONT] ,[DATETO_UPFRONT] , [MONTH],[YEAR])
	   SELECT  DISTINCT      
	   --DATEADD(MONTH,-3,[DATETO]) AS [DATEFROM],      
	   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-3,[DATETO])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-3,[DATETO])) = YEAR(@STARTDATE1))) THEN    
	   @STARTDATE1 ELSE DATEADD(MONTH,-3,[DATETO]) END,    
	   [DATETO] = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END,
	   
	   [DATEFROM_UPFRONT] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
	   [DATETO_UPFRONT] = DATEADD(DAY,-1, DATEADD(MONTH,3, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,

	   [MONTH] = CASE  WHEN [DATETO] > @TODATE       
	   THEN DATEPART(MONTH,@TODATE) ELSE      
	   DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,      
	   --DATEPART(YEAR,[DATETO]) AS [YEAR]         
	   [YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END  
	   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    	   
	   
	   SELECT TOP 1 @TEMPMONTH = MONTH , @TEMPYEAR =YEAR  FROM @TEMPUP ORDER BY ROWID DESC        
	END

	ELSE
	BEGIN                


	   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
	   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
	            
	   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))              
	                
	   SET @FROMDATE = DATEADD(MONTH,3,CAST(@STARTDATE AS DATETIME))                
	   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                
	                
	   ;WITH DATESEQUENCE( [DATE] ) AS                  
	   (                   
	   SELECT @FROMDATE AS [DATE]                   
	   UNION ALL                  
	   SELECT DATEADD(MONTH, 3, [DATE])                   
	   FROM DATESEQUENCE                   
	   WHERE DATE < @TODATE                   
	   )                 
	   
	   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
	   SELECT  DISTINCT                
	   [DATEFROM] = DATEADD(MONTH,-3,[DATE]),                
	   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-3,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-3,[DATE])) = YEAR(@STARTDATE1))) THEN @STARTDATE1 ELSE DATEADD(MONTH,-3,[DATE]) END,              
	   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE                
	   DATEADD(DAY,-1,[DATE]) END,          
	   [MONTH] = CASE  WHEN [DATE] > @TODATE                 
	   THEN DATEPART(MONTH,@TODATE) ELSE                
	   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
	   --DATEPART(YEAR,[DATE]) AS [YEAR]                   
	   [YEAR] = CASE  WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR,DATEADD(DAY,-1,[DATE]))  END  
	   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)                
	   
	   SELECT TOP 1 @TEMPMONTH = MONTH , @TEMPYEAR =YEAR  FROM @TEMP ORDER BY ROWID DESC      
	   
	END               
      
 IF  @TEMPMONTH = @MONTH AND @TEMPYEAR = @YEAR      
 BEGIN      
  SET @BOOLYEAREND = 1      
 END      
 ELSE      
 BEGIN      
 IF @INCTYPEID = 1
 BEGIN
	SELECT @ROWID = ROWID FROM @TEMPUP WHERE MONTH =@MONTH AND YEAR = @YEAR AND ROWID IN (4,8,12,16,20,24,28,32,36,40)      
 END
 ELSE
 BEGIN
	SELECT @ROWID = ROWID FROM @TEMP WHERE MONTH =@MONTH AND YEAR = @YEAR AND ROWID IN (4,8,12,16,20,24,28,32,36,40)      
 END
IF @ROWID IS NOT NULL      
	BEGIN      
		SET @BOOLYEAREND = 1      
	END      
 END           
END                
                
 IF @TYPE='Y'                
 BEGIN                
 
 IF @INCTYPEID = 1
 BEGIN 
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))     
      
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))      
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))      
      
   ;WITH DATESEQUENCE( [DATETO] ) AS        
   (         
   SELECT @FROMDATE AS [DATETO]         
   UNION ALL        
   SELECT DATEADD(MONTH, 12, [DATETO])         
   FROM DATESEQUENCE         
   WHERE [DATETO] < @TODATE         
   )       
      
   INSERT INTO @TEMPUP([DATEFROM],[DATETO],[DATEFROM_UPFRONT] ,[DATETO_UPFRONT] , [MONTH],[YEAR])
   SELECT  DISTINCT      
   --DATEADD(MONTH,-12,[DATETO]) AS [DATEFROM],      
   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-12,[DATETO])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-12,[DATETO])) = YEAR(@STARTDATE1))) THEN    
   @STARTDATE1 ELSE DATEADD(MONTH,-12,[DATETO]) END,    
   [DATETO] = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE  DATEADD(DAY,-1,[DATETO]) END,
   
   [DATEFROM_UPFRONT] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
   [DATETO_UPFRONT] = DATEADD(DAY,-1, DATEADD(MONTH,12, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,

   [MONTH] = CASE  WHEN [DATETO] > @TODATE       
   THEN DATEPART(MONTH,@TODATE) ELSE      
   DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,      
   --DATEPART(YEAR,[DATETO]) AS [YEAR]         
	[YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END  
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    
   
   SELECT TOP 1 @TEMPMONTH = MONTH , @TEMPYEAR =YEAR  FROM @TEMPUP ORDER BY ROWID DESC      
   
   END
   ELSE
   BEGIN
	   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
	   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
	   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))               
	                
	   SET @FROMDATE = DATEADD(MONTH,12,CAST(@STARTDATE AS DATETIME))                
	   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                
	                
	   ;WITH DATESEQUENCE( [DATE] ) AS                  
	   (                   
	   SELECT @FROMDATE AS [DATE]                   
	   UNION ALL                  
	   SELECT DATEADD(MONTH, 12, [DATE])                   
	   FROM DATESEQUENCE                   
	   WHERE DATE < @TODATE                   
	   )                 
	                
	   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
	   SELECT  DISTINCT                
	   [DATEFROM] =DATEADD(MONTH,-12,[DATE]) ,                
	   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-12,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-12,[DATE])) = YEAR(@STARTDATE1))) THEN @STARTDATE1 ELSE DATEADD(MONTH,-12,[DATE]) END,              
	   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE                
	   DATEADD(DAY,-1,[DATE]) END,                
	   [MONTH] = CASE  WHEN [DATE] > @TODATE                 
	   THEN DATEPART(MONTH,@TODATE) ELSE                
	   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
	   --DATEPART(YEAR,[DATE]) AS [YEAR]                   
	   [YEAR] = CASE  WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR,DATEADD(DAY,-1,[DATE]))  END  
	   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)                
	                   
	   SELECT TOP 1 @TEMPMONTH = MONTH , @TEMPYEAR =YEAR  FROM @TEMP ORDER BY ROWID DESC      
   END
   
      
 IF  @TEMPMONTH = @MONTH AND @TEMPYEAR = @YEAR      
 BEGIN      
  SET @BOOLYEAREND = 1      
 END      
 ELSE      
 BEGIN      
 
 IF @INCTYPEID = 1
 BEGIN
	 SELECT @ROWID = ROWID FROM @TEMPUP WHERE MONTH =@MONTH AND YEAR = @YEAR AND ROWID IN (1,2,3,4,5,6,7,8,9,10)      
 END
 ELSE
 BEGIN
	SELECT @ROWID = ROWID FROM @TEMP WHERE MONTH =@MONTH AND YEAR = @YEAR AND ROWID IN (1,2,3,4,5,6,7,8,9,10)      
 END
 
 
  --SELECT @ROWID      
     IF @ROWID IS NOT NULL      
        BEGIN      
   SET @BOOLYEAREND = 1      
  END      
 END         
            
                
 END                 
 IF @TYPE='H'                
 BEGIN                
  IF @INCTYPEID = 1
  BEGIN
		 SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
		   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
		   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))    
		      
		   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))      
		   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))      
		      
		 ;WITH DATESEQUENCE( [DATETO] ) AS        
		   (         
		   SELECT @FROMDATE AS [DATETO]         
		   UNION ALL        
		   SELECT DATEADD(MONTH, 6, [DATETO])         
		   FROM DATESEQUENCE         
		   WHERE [DATETO] < @TODATE         
		   )       
		      
		   INSERT INTO @TEMPUP([DATEFROM],[DATETO],[DATEFROM_UPFRONT] ,[DATETO_UPFRONT] , [MONTH],[YEAR])
		   SELECT  DISTINCT      
		   --DATEADD(MONTH,-6,[DATETO]) AS [DATEFROM],      
		   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-6,[DATETO])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-6,[DATETO])) = YEAR(@STARTDATE1))) THEN    
		   @STARTDATE1 ELSE DATEADD(MONTH,-6,[DATETO]) END,    
		   [DATETO] = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE  DATEADD(DAY,-1,[DATETO]) END,
		   
		   [DATEFROM_UPFRONT] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
		   [DATETO_UPFRONT] = DATEADD(DAY,-1, DATEADD(MONTH,6, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,

		   [MONTH] = CASE  WHEN [DATETO] > @TODATE       
		   THEN DATEPART(MONTH,@TODATE) ELSE      
		   DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,      
		   --DATEPART(YEAR,[DATETO]) AS [YEAR]         
		[YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END  
		   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)      
		   
		   SELECT TOP 1 @TEMPMONTH = MONTH , @TEMPYEAR =YEAR  FROM @TEMPUP ORDER BY ROWID DESC    
		   
	END		   
	ELSE
	BEGIN
		SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
		SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
		SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))              
		            
		SET @FROMDATE = DATEADD(MONTH,6,CAST(@STARTDATE AS DATETIME))                
		SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                
		            
		;WITH DATESEQUENCE( [DATE] ) AS                  
		(                   
		SELECT @FROMDATE AS [DATE]                   
		UNION ALL                  
		SELECT DATEADD(MONTH, 6, [DATE])                   
		FROM DATESEQUENCE                   
		WHERE DATE < @TODATE                   
		)                 
		            
		INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
		SELECT  DISTINCT                
		[DATEFROM] = DATEADD(MONTH,-6,[DATE]) ,                
		--[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-6,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-6,[DATE])) = YEAR(@STARTDATE1))) THEN   @STARTDATE1 ELSE DATEADD(MONTH,-6,[DATE]) END,              
		[DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE                
		DATEADD(DAY,-1,[DATE]) END,                
		[MONTH] = CASE  WHEN [DATE] > @TODATE                 
		THEN DATEPART(MONTH,@TODATE) ELSE                
		DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
		--DATEPART(YEAR,[DATE]) AS [YEAR]                   
		[YEAR] = CASE  WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR,DATEADD(DAY,-1,[DATE]))  END  
		FROM DATESEQUENCE OPTION (MAXRECURSION 10000)
		
		SELECT TOP 1 @TEMPMONTH = MONTH , @TEMPYEAR =YEAR  FROM @TEMP ORDER BY ROWID DESC    
		
	END
	
	
 
        
      
 IF  @TEMPMONTH = @MONTH AND @TEMPYEAR = @YEAR      
 BEGIN      
  SET @BOOLYEAREND = 1      
 END      
 ELSE      
 BEGIN      
 IF @INCTYPEID = 1
 BEGIN
	SELECT @ROWID = ROWID FROM @TEMPUP WHERE MONTH =@MONTH AND YEAR = @YEAR AND ROWID IN (2,4,6,8,10,12,14,16,18,20)      
 END
 ELSE
 BEGIN
	SELECT @ROWID = ROWID FROM @TEMP WHERE MONTH =@MONTH AND YEAR = @YEAR AND ROWID IN (2,4,6,8,10,12,14,16,18,20)      
 END
 
 
  --SELECT @ROWID      
     IF @ROWID IS NOT NULL      
        BEGIN      
   SET @BOOLYEAREND = 1      
  END      
 END         
           
            
 END                  
 IF @TYPE='M'                
 BEGIN                
 IF @INCTYPEID = 1
 BEGIN
 
 SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))    
      
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))      
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))      
   --SELECT @FROMDATE      
   --SELECT @TODATE      
      
      
   ;WITH DATESEQUENCE( [DATETO] ) AS        
   (         
   SELECT @FROMDATE AS [DATETO]         
   UNION ALL        
   SELECT DATEADD(MONTH, 1, [DATETO])         
   FROM DATESEQUENCE         
   WHERE [DATETO] < @TODATE         
   )         
   INSERT INTO @TEMPUP([DATEFROM],[DATETO],[DATEFROM_UPFRONT] ,[DATETO_UPFRONT] , [MONTH],[YEAR])
   SELECT  DISTINCT      
   --DATEADD(MONTH,-1,[DATETO]) AS [DATEFROM],      
   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-1,[DATETO])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-1,[DATETO])) = YEAR(@STARTDATE1))) THEN    
   @STARTDATE1 ELSE DATEADD(MONTH,-1,[DATETO]) END,    
   [DATETO]  = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END,      
   
   [DATEFROM_UPFRONT] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
   [DATETO_UPFRONT] = DATEADD(DAY,-1, DATEADD(MONTH,1, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,

   [MONTH] = CASE WHEN [DATETO] > @TODATE THEN DATEPART(MONTH,@TODATE) ELSE DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,      
   [YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END      
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)      
   
   
   SELECT TOP 1 @TEMPMONTH = MONTH , @TEMPYEAR =YEAR  FROM @TEMPUP ORDER BY ROWID DESC      
      
END
ELSE
BEGIN

   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))              
                
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))                
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                
   --SELECT @FROMDATE                
   --SELECT @TODATE       
                
   ;WITH DATESEQUENCE( [DATE] ) AS                  
   (                   
   SELECT @FROMDATE AS [DATE]                   
   UNION ALL                  
   SELECT DATEADD(MONTH, 1, [DATE])                   
   FROM DATESEQUENCE                   
   WHERE DATE < @TODATE                   
   )                   
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
   SELECT  DISTINCT                
   [DATEFROM] =  DATEADD(MONTH,-1,[DATE]) ,                
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-1,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-1,[DATE])) = YEAR(@STARTDATE1))) THEN  @STARTDATE1 ELSE DATEADD(MONTH,-1,[DATE]) END,              
   [DATE]  = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATE]) END,                
   [MONTH] = CASE WHEN [DATE] > @TODATE THEN DATEPART(MONTH,@TODATE) ELSE DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
   [YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END                
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)                
                   
  SELECT TOP 1 @TEMPMONTH = MONTH , @TEMPYEAR =YEAR  FROM @TEMP ORDER BY ROWID DESC      
  
  END
      
 IF  @TEMPMONTH = @MONTH AND @TEMPYEAR = @YEAR      
 BEGIN      
  SET @BOOLYEAREND = 1      
 END      
 ELSE      
 BEGIN     
	IF @INCTYPEID = 1 
	BEGIN
		SELECT @ROWID = ROWID FROM @TEMPUP WHERE MONTH =@MONTH AND YEAR = @YEAR AND ROWID IN (12,24,36,48,60,72,84,96,108,120)      
	END
	ELSE
	BEGIN
		SELECT @ROWID = ROWID FROM @TEMP WHERE MONTH =@MONTH AND YEAR = @YEAR AND ROWID IN (12,24,36,48,60,72,84,96,108,120)      
	END
	
  --SELECT @ROWID      
     IF @ROWID IS NOT NULL      
        BEGIN      
   SET @BOOLYEAREND = 1      
  END      
 END           
 END                 
  RETURN @BOOLYEAREND                 
END   
  
  
GO

/****** Object:  UserDefinedFunction [dbo].[FN_INC_RETURN_BOOL_LASTPAYMENT]    Script Date: 04/28/2011 15:48:15 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*                  
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.                  
'********************************************************************************************                  
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART                  
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE                  
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS                  
'********************************************************************************************                  
NAME: [FN_INC_RETURN_BOOL_LASTPAYMENT]            
PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT            
|--------|--------------------------------------------------------------|            
|SL. NO. |DATE    |DEVELOPER’S NAME  |ACTIVITY     |            
|-----------------------------------------------------------------------|            
|1.   |05/01/2010  |NEERAJ GOSWAMI       |CREATION     |            
|--
---------------------------------------------------------------------|            

SELECT [dbo].[FN_INC_RETURN_BOOL_LASTPAYMENT] (20100101,20111231,'H',28,11,2011)

*/


CREATE FUNCTION [dbo].[FN_INC_RETURN_BOOL_LASTPAYMENT]        
(                        
   @EFFECTIVEDATE INT,              
   @ENDDATE INT=NULL,            
   @TYPE CHAR(1)=NULL,        
   @BC_ID INT=NULL,    
   @MONTH INT = NULL,    
   @YEAR INT = NULL    
)              
RETURNS BIT               
AS              
BEGIN            
DECLARE @ISBILLINGPERION BIT            
DECLARE @STARTDATE DATETIME             
DECLARE @STARTDATE1 DATETIME             
           
DECLARE @TODATE DATETIME, @FROMDATE DATETIME               
DECLARE @RETURNPERIOD VARCHAR(50)            
        
DECLARE @RANG1 DATETIME        
DECLARE @RANG2 DATETIME        
DECLARE @BOOLLASTPAYMENTDATE BIT        
        
        
            
DECLARE @TEMP TABLE            
 (            
  [DATEFROM] DATETIME,            
  [DATETO] DATETIME,            
  [MONTH] INT ,            
  [YEAR] INT             
 )            
            
 DECLARE @RANGETABLE TABLE    
 (    
  DATE DATETIME    
 )    
    
 IF @TYPE='Q'            
 BEGIN        
        
            
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))            
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))            
        
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))          
            
   SET @FROMDATE = DATEADD(MONTH,3,CAST(@STARTDATE AS DATETIME))            
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))            
            
   ;WITH DATESEQUENCE( [DATE] ) AS              
   (               
   SELECT @FROMDATE AS [DATE]               
   UNION ALL              
   SELECT DATEADD(MONTH, 3, [DATE])               
   FROM DATESEQUENCE               
   WHERE DATE < @TODATE               
   )             
            
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])            
   SELECT  DISTINCT            
   [DATEFROM] = DATEADD(MONTH,-3,[DATE]),            
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-3,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-3,[DATE])) = YEAR(@STARTDATE1))) THEN @STARTDATE1 ELSE DATEADD(MONTH,-3,[DATE]) END,          
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE            
   DATEADD(DAY,-1,[DATE]) END,            
   [MONTH] = CASE  WHEN [DATE] > @TODATE             
   THEN DATEPART(MONTH,@TODATE) ELSE            
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,            
   [YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END               
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)            
               
 	SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP ORDER BY [DATEFROM] DESC   

	--SELECT @RANG1,@RANG2    

	INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))
	--SELECT * FROM @RANGETABLE

	IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)
	BEGIN        
	SET @BOOLLASTPAYMENTDATE =  0        
	END        
	ELSE        
	BEGIN        
	SET @BOOLLASTPAYMENTDATE = 1         
	END  

            
           
 END            
            
 IF @TYPE='Y'            
 BEGIN            
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))            
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))            
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))           
            
   SET @FROMDATE = DATEADD(MONTH,12,CAST(@STARTDATE AS DATETIME))            
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))            
            
   ;WITH DATESEQUENCE( [DATE] ) AS              
   (               
   SELECT @FROMDATE AS [DATE]               
   UNION ALL              
   SELECT DATEADD(MONTH, 12, [DATE])               
   FROM DATESEQUENCE               
   WHERE DATE < @TODATE               
   )             
            
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])            
   SELECT  DISTINCT            
   [DATEFROM] =DATEADD(MONTH,-12,[DATE]) ,            
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-12,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-12,[DATE])) = YEAR(@STARTDATE1))) THEN @STARTDATE1 ELSE DATEADD(MONTH,-12,[DATE]) END,          
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE            
   DATEADD(DAY,-1,[DATE]) END,            
   [MONTH] = CASE  WHEN [DATE] > @TODATE             
   THEN DATEPART(MONTH,@TODATE) ELSE            
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,            
   [YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END               
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)            
               
	SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP ORDER BY [DATEFROM] DESC   

	--SELECT @RANG1,@RANG2    

	INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))
	--SELECT * FROM @RANGETABLE

	IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)
	BEGIN        
	SET @BOOLLASTPAYMENTDATE =  0        
	END        
	ELSE        
	BEGIN        
	SET @BOOLLASTPAYMENTDATE = 1         
	END  
    
        
            
 END             
 IF @TYPE='H'            
 BEGIN            
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))            
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))            
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))          
            
   SET @FROMDATE = DATEADD(MONTH,6,CAST(@STARTDATE AS DATETIME))            
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))            
            
 ;WITH DATESEQUENCE( [DATE] ) AS              
   (               
   SELECT @FROMDATE AS [DATE]               
   UNION ALL              
   SELECT DATEADD(MONTH, 6, [DATE])               
   FROM DATESEQUENCE               
   WHERE DATE < @TODATE               
   )             
            
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])            
   SELECT  DISTINCT            
   [DATEFROM] = DATEADD(MONTH,-6,[DATE]) ,            
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-6,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-6,[DATE])) = YEAR(@STARTDATE1))) THEN   @STARTDATE1 ELSE DATEADD(MONTH,-6,[DATE]) END,          
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE            
   DATEADD(DAY,-1,[DATE]) END,            
   [MONTH] = CASE  WHEN [DATE] > @TODATE             
   THEN DATEPART(MONTH,@TODATE) ELSE            
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,            
   [YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END               
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)            
 	SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP ORDER BY [DATEFROM] DESC   

	--SELECT @RANG1,@RANG2    

	INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))
	--SELECT * FROM @RANGETABLE

	IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)
	BEGIN        
	SET @BOOLLASTPAYMENTDATE =  0        
	END        
	ELSE        
	BEGIN        
	SET @BOOLLASTPAYMENTDATE = 1         
	END  

        
 END              
 IF @TYPE='M'            
 BEGIN            
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))            
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))            
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))          
            
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))            
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))            
   --SELECT @FROMDATE            
   --SELECT @TODATE            
            
            
   ;WITH DATESEQUENCE( [DATE] ) AS              
   (               
  SELECT @FROMDATE AS [DATE]               
   UNION ALL              
   SELECT DATEADD(MONTH, 1, [DATE])               
   FROM DATESEQUENCE               
   WHERE DATE < @TODATE               
   )               
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])            
   SELECT  DISTINCT            
   [DATEFROM] =  DATEADD(MONTH,-1,[DATE]) ,            
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-1,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-1,[DATE])) = YEAR(@STARTDATE1))) THEN  @STARTDATE1 ELSE DATEADD(MONTH,-1,[DATE]) END,          
   [DATE]  = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATE]) END,            
   [MONTH] = CASE WHEN [DATE] > @TODATE THEN DATEPART(MONTH,@TODATE) ELSE DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,            
   [YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END            
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)            
               
  	SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP ORDER BY [DATEFROM] DESC   

	--SELECT @RANG1,@RANG2    

	INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))
	--SELECT * FROM @RANGETABLE

	IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)
	BEGIN        
	SET @BOOLLASTPAYMENTDATE =  0        
	END        
	ELSE        
	BEGIN        
	SET @BOOLLASTPAYMENTDATE = 1         
	END     
 END        
RETURN @BOOLLASTPAYMENTDATE             
END



GO

/****** Object:  UserDefinedFunction [dbo].[FN_INC_RETURN_BOOL_FIRSTPAYMENT]    Script Date: 04/28/2011 15:48:19 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 /*                        
    
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.                        
'********************************************************************************************                        
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART                        
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE                        
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS                        
'********************************************************************************************                        
NAME: [FN_INC_RETURN_BOOL_FIRSTPAYMENT]                  
PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT                  
|--------|--------------------------------------------------------------|                  
|SL. NO. |DATE   |DEVELOPER’S NAME |ACTIVITY     |                  
|-----------------------------------------------------------------------|                  
|1.   |02/01/2010 |NEERAJ GOSWAMI  |CREATION     |                  
|-----------------------------------------------------------------------|                  
                
SELECT dbo.[FN_INC_RETURN_BOOL_FIRSTPAYMENT]('20090228','20100930','Q',7,4,2009)    
    
*/                  
                 
                  
CREATE FUNCTION [dbo].[FN_INC_RETURN_BOOL_FIRSTPAYMENT]            
(                            
   @EFFECTIVEDATE INT,                  
   @ENDDATE INT=NULL,                
   @TYPE CHAR(1)=NULL,            
   @BC_ID INT=NULL,        
   @MONTH INT = NULL,        
   @YEAR INT = NULL        
)                  
RETURNS BIT                   
AS                  
BEGIN    
                
DECLARE @ISBILLINGPERION BIT                
DECLARE @STARTDATE DATETIME                 
DECLARE @STARTDATE1 DATETIME                 
DECLARE @TODATE DATETIME, @FROMDATE DATETIME                   
DECLARE @RETURNPERIOD VARCHAR(50)                
DECLARE @RANG1 DATETIME            
DECLARE @RANG2 DATETIME            
DECLARE @BOOLFIRSTPAYMENTDATE BIT    
DECLARE @FIRSTPAYDATE INTEGER

            
DECLARE @TEMP TABLE                
 (                
  [DATEFROM] DATETIME,                
  [DATETO] DATETIME,                
  [MONTH] INT ,                
  [YEAR] INT                 
 )           
  DECLARE @PAYTEMP TABLE                
 (                
  [DATEFROM] DATETIME,                
  [DATETO] DATETIME,                
  [MONTH] INT ,                
  [YEAR] INT                 
 ) 
      
 DECLARE @RANGETABLE TABLE        
 (        
  DATE DATETIME        
 )        
        
 IF @TYPE='Q'                
 BEGIN    
            
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))            
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))             
                
   SET @FROMDATE = DATEADD(MONTH,3,CAST(@STARTDATE AS DATETIME))                
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                
                
   ;WITH DATESEQUENCE( [DATE] ) AS                  
   (                   
   SELECT @FROMDATE AS [DATE]                   
   UNION ALL                  
   SELECT DATEADD(MONTH, 3, [DATE])                   
   FROM DATESEQUENCE                   
   WHERE DATE < @TODATE                   
   )                 
                
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
   SELECT  DISTINCT                
   [DATEFROM] = DATEADD(MONTH,-3,[DATE]),                
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-3,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-3,[DATE])) = YEAR(@STARTDATE1))) THEN @STARTDATE1 ELSE DATEADD(MONTH,-3,[DATE]) END,              
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE                
   DATEADD(DAY,-1,[DATE]) END,                
   [MONTH] = CASE  WHEN [DATE] > @TODATE                 
   THEN DATEPART(MONTH,@TODATE) ELSE                
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
   [YEAR] = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END                   
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)                
                   
   --SELECT TOP 1  @RETURNPERIOD= CAST([DATEFROM]AS VARCHAR(12)) + ' - ' + CAST([DATETO] AS VARCHAR(12)) FROM @TEMP            
   --SELECT TOP 1  [DATEFROM] , [DATETO] FROM @TEMP            
   --SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  DATEADD(MONTH,-1,[DATETO])  FROM @TEMP            
   SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP
   INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR])	SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP
   --SELECT @RANG1,@RANG2
  INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))
  
	IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)          
	BEGIN            
	  SET @BOOLFIRSTPAYMENTDATE =  0            
	END            
	ELSE            
	BEGIN  
		IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)
		BEGIN
			SET @BOOLFIRSTPAYMENTDATE = 0  
		END
		ELSE
		BEGIN
			SET @BOOLFIRSTPAYMENTDATE = 1
		END		 
	END                
END
                
 IF @TYPE='Y'                
 BEGIN                
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))               
                
   SET @FROMDATE = DATEADD(MONTH,12,CAST(@STARTDATE AS DATETIME))                
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                
                
   ;WITH DATESEQUENCE( [DATE] ) AS                  
   (                   
   SELECT @FROMDATE AS [DATE]                   
   UNION ALL                  
   SELECT DATEADD(MONTH, 12, [DATE])                   
   FROM DATESEQUENCE                   
   WHERE DATE < @TODATE                   
   )                 
                
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
   SELECT  DISTINCT                
   [DATEFROM] =DATEADD(MONTH,-12,[DATE]) ,                
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-12,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-12,[DATE])) = YEAR(@STARTDATE1))) THEN @STARTDATE1 ELSE DATEADD(MONTH,-12,[DATE]) END,              
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE                
   DATEADD(DAY,-1,[DATE]) END,                
   [MONTH] = CASE  WHEN [DATE] > @TODATE                 
   THEN DATEPART(MONTH,@TODATE) ELSE                
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
   [YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END                   
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)                
            
 SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  DATEADD(MONTH,-1,[DATETO])  FROM @TEMP    
 INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR])	SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP        
            
 --SELECT @RANG1,@RANG2            
             
        
 INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))        
         
	IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)          
	BEGIN            
	  SET @BOOLFIRSTPAYMENTDATE =  0            
	END            
	ELSE            
	BEGIN  
		IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)
		BEGIN
			SET @BOOLFIRSTPAYMENTDATE = 0  
		END
		ELSE
		BEGIN
			SET @BOOLFIRSTPAYMENTDATE = 1
		END		 
	END
                
 END                 
 IF @TYPE='H'                
 BEGIN                
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))              
                
   SET @FROMDATE = DATEADD(MONTH,6,CAST(@STARTDATE AS DATETIME))                
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))                
                
 ;WITH DATESEQUENCE( [DATE] ) AS                  
   (                   
   SELECT @FROMDATE AS [DATE]                   
   UNION ALL                  
   SELECT DATEADD(MONTH, 6, [DATE])                   
   FROM DATESEQUENCE                   
   WHERE DATE < @TODATE                   
   )                 
                
   INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
   SELECT  DISTINCT                
   [DATEFROM] = DATEADD(MONTH,-6,[DATE]) ,                
   --[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-6,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-6,[DATE])) = YEAR(@STARTDATE1))) THEN   @STARTDATE1 ELSE DATEADD(MONTH,-6,[DATE]) END,              
   [DATE] = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE                
   DATEADD(DAY,-1,[DATE]) END,                
   [MONTH] = CASE  WHEN [DATE] > @TODATE                 
   THEN DATEPART(MONTH,@TODATE) ELSE                
   DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
   [YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END                   
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    
            
 --SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  DATEADD(MONTH,-1,[DATETO])  FROM @TEMP            
	SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP            
	INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR])	SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP
        
	INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))        
         
 IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)          
	BEGIN            
	  SET @BOOLFIRSTPAYMENTDATE =  0            
	END            
	ELSE            
	BEGIN  
		IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)
		BEGIN
			SET @BOOLFIRSTPAYMENTDATE = 0  
		END
		ELSE
		BEGIN
			SET @BOOLFIRSTPAYMENTDATE = 1
		END		 
	END                
            
 END                  
 
 
 IF @TYPE='M'                
 BEGIN                
	SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
	SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))                
	SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))              
	            
	SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))                
	SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))    
	            
	;WITH DATESEQUENCE( [DATE] ) AS                  
	(                   
	SELECT @FROMDATE AS [DATE]                   
	UNION ALL                  
	SELECT DATEADD(MONTH, 1, [DATE])                   
	FROM DATESEQUENCE                   
	WHERE DATE < @TODATE                   
	)                   
	INSERT INTO @TEMP([DATEFROM],[DATETO],[MONTH],[YEAR])                
	SELECT  DISTINCT                
	[DATEFROM] =  DATEADD(MONTH,-1,[DATE]) ,                
	--[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-1,[DATE])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-1,[DATE])) = YEAR(@STARTDATE1))) THEN  @STARTDATE1 ELSE DATEADD(MONTH,-1,[DATE]) END,              
	[DATE]  = CASE  WHEN [DATE] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATE]) END,                
	[MONTH] = CASE WHEN [DATE] > @TODATE THEN DATEPART(MONTH,@TODATE) ELSE DATEPART(MONTH,DATEADD(DAY,-1,[DATE]))  END,                
	[YEAR]  = CASE WHEN [DATE] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATE]))  END                
	FROM DATESEQUENCE OPTION (MAXRECURSION 10000)    
               
	SELECT  TOP 1  @RANG1= [DATEFROM], @RANG2 =  [DATETO]  FROM @TEMP    
	INSERT INTO @PAYTEMP([DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR])	SELECT TOP 1  [DATEFROM] ,[DATETO] ,[MONTH] ,[YEAR] FROM @TEMP
	--SELECT @RANG1,@RANG2                         
	INSERT INTO @RANGETABLE VALUES (CONVERT(DATETIME,CONVERT(VARCHAR, ((((@YEAR*100) + @MONTH)*100)+1)),103))        
 
	IF NOT EXISTS (SELECT DATE FROM @RANGETABLE WHERE DATE BETWEEN @RANG1 AND @RANG2)          
	BEGIN            
	  SET @BOOLFIRSTPAYMENTDATE =  0            
	END            
	ELSE            
	BEGIN  
		IF EXISTS (SELECT * FROM @PAYTEMP WHERE YEAR(DATETO)= @YEAR AND MONTH(DATETO) = @MONTH)
		BEGIN
			SET @BOOLFIRSTPAYMENTDATE = 0  
		END
		ELSE
		BEGIN
			SET @BOOLFIRSTPAYMENTDATE = 1
		END		 
	END                

  
 END        
            
RETURN @BOOLFIRSTPAYMENTDATE                 
END 


GO

/****** Object:  UserDefinedFunction [dbo].[FN_INC_PAYMENT_CURRENT_STATUS]    Script Date: 04/28/2011 15:48:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_ISBILLING_MONTH]
PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |20/09/2008  |NEERAJ GOSWAMI       |CREATION					|
|-----------------------------------------------------------------------|

SELECT DBO.[FN_INC_PAYMENT_CURRENT_STATUS](20)

*/


CREATE FUNCTION [dbo].[FN_INC_PAYMENT_CURRENT_STATUS]
(          
   @PAYMENT_ID INT=NULL
)
RETURNS VARCHAR(15)
AS
BEGIN

DECLARE @STATUS VARCHAR(15)
DECLARE @TEMPAOFFICE VARCHAR(12)

SELECT @TEMPAOFFICE =  AOFFICE FROM AGROUP WHERE CHAIN_CODE IN (
	SELECT CHAIN_CODE FROM T_INC_BC_MASTER WHERE BC_ID IN(
		SELECT BC_ID FROM T_INC_PAYMENT_DETAILS WHERE PAYMENT_ID = @PAYMENT_ID ))

	SELECT @STATUS = APPROVAL_STATUS_NAME FROM (
	SELECT  BCLEVEL =A.LEVEL_NO, E.EMPLOYEEID,E.EMPLOYEE_NAME,APPROVAL_STATUS_ID= F.APPROVAL_STATUS_ID,G.APPROVAL_STATUS_NAME,
	CHAIN_CODE=2,A.AOFFICE FROM T_INC_PA_APPROVAL_LEVEL_EMP A 
	LEFT OUTER JOIN T_INC_PA_APPROVAL_LEVEL B ON A.AOFFICE = B.AOFFICE
	LEFT OUTER JOIN T_G_EMPLOYEES E ON A.EMPLOYEEID = E.EMPLOYEEID
	INNER  JOIN T_INC_PA_APPROVAL_QUEUE F ON F.EMPLOYEEID = A.EMPLOYEEID AND PAYMENT_ID=@PAYMENT_ID	
	INNER JOIN T_INC_PA_APPROVAL_STATUS G ON F.APPROVAL_STATUS_ID = G.APPROVAL_STATUS_ID
	WHERE A.AOFFICE=@TEMPAOFFICE
	) AS A WHERE BCLEVEL IN 
	(
	SELECT [LEVEL]=MAX(BCLEVEL) FROM ( SELECT  BCLEVEL =A.LEVEL_NO,  E.EMPLOYEEID, E.EMPLOYEE_NAME, APPROVAL_STATUS_ID= F.APPROVAL_STATUS_ID,CHAIN_CODE=2, A.AOFFICE FROM T_INC_PA_APPROVAL_LEVEL_EMP A 
	LEFT OUTER JOIN T_INC_PA_APPROVAL_LEVEL B ON A.AOFFICE = B.AOFFICE
	LEFT OUTER JOIN T_G_EMPLOYEES E ON A.EMPLOYEEID = E.EMPLOYEEID
	INNER JOIN T_INC_PA_APPROVAL_QUEUE F ON F.EMPLOYEEID = A.EMPLOYEEID AND PAYMENT_ID=@PAYMENT_ID	
	INNER JOIN T_INC_PA_APPROVAL_STATUS G ON F.APPROVAL_STATUS_ID = G.APPROVAL_STATUS_ID
	WHERE A.AOFFICE=@TEMPAOFFICE
	) APPROVALQUE)        
IF @STATUS IS NULL
BEGIN
	SET @STATUS= NULL
END
	RETURN @STATUS
END













GO

/****** Object:  UserDefinedFunction [dbo].[FN_INC_ISVALIDPAYMENTPERIOD_UPFRONT]    Script Date: 04/28/2011 15:48:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*

DECLARE @EFFECTIVEDATE INT
DECLARE @ENDDATE INT
DECLARE @BILLINGMONTH INT
DECLARE @BILLINGYEAR INT
DECLARE @TYPE CHAR(1)

DECLARE @ISBILLINGPERION BIT      
DECLARE @STARTDATE DATETIME       
DECLARE @STARTDATE1 DATETIME       
     
DECLARE @TODATE DATETIME, @FROMDATE DATETIME         
DECLARE @RETURNPERIOD VARCHAR(50)      
      
DECLARE @TEMP TABLE      
 (      
  [DATEFROM] DATETIME,      
  [DATETO] DATETIME,      
  [MONTH] INT ,      
  [YEAR] INT       
 )      
      


SET @EFFECTIVEDATE ='20080102'
SET @ENDDATE ='20091231'
SET @BILLINGMONTH =1
SET @BILLINGYEAR =2008
SET @TYPE ='Q'

SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))    
  
SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))      
SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))      
  
;WITH DATESEQUENCE( [DATETO] ) AS        
(         
SELECT @FROMDATE AS [DATETO]         
UNION ALL        
SELECT DATEADD(MONTH, 3, [DATETO])         
FROM DATESEQUENCE         
WHERE [DATETO] < @TODATE         
)       
  
INSERT INTO @TEMP([DATEFROM],[DATETO],[DATEFROM_UPFRONT] ,[DATETO_UPFRONT] , [MONTH],[YEAR])
SELECT  DISTINCT      
--DATEADD(MONTH,-3,[DATETO]) AS [DATEFROM],      
[DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-3,[DATETO])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-3,[DATETO])) = YEAR(@STARTDATE1))) THEN    
@STARTDATE1 ELSE DATEADD(MONTH,-3,[DATETO]) END,    
[DATETO] = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE      
DATEADD(DAY,-1,[DATETO]) END,      
[MONTH] = CASE  WHEN [DATETO] > @TODATE       
THEN DATEPART(MONTH,@TODATE) ELSE      
DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,      
--DATEPART(YEAR,[DATETO]) AS [YEAR]         
[YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END  
FROM DATESEQUENCE OPTION (MAXRECURSION 10000)      
     

SELECT * FROM @TEMP

SELECT @RETURNPERIOD= CAST( [DATEFROM_UPFRONT] AS VARCHAR(12)) + ' - ' + CAST ( [DATETO_UPFRONT]  AS VARCHAR(12)) FROM @TEMP
WHERE [MONTH] = @BILLINGMONTH AND [YEAR] = @BILLINGYEAR


SELECT * FROM T_INC_BC_MASTER 
SELECT dbo.[FN_INC_ISVALIDPAYMENTPERIOD_UPFRONT](20080102,20091231,12,2009,'H')

SELECT dbo.[FN_INC_ISVALIDPAYMENTPERIOD_UPFRONT](20080102,20091231,3,2008,'Q')

[FN_INC_ISVALIDPAYMENTPERIOD_UPFRONT]

*/
        
CREATE FUNCTION [dbo].[FN_INC_ISVALIDPAYMENTPERIOD_UPFRONT]
(
   @EFFECTIVEDATE INT,        
   @ENDDATE INT=NULL,      
   @BILLINGMONTH INT=NULL,      
   @BILLINGYEAR INT=NULL,      
   @TYPE CHAR(1)=NULL        
)        

RETURNS BIT   
AS  
BEGIN      

DECLARE @ISBILLING BIT      

DECLARE @ISBILLINGPERION BIT      
DECLARE @STARTDATE DATETIME       
DECLARE @STARTDATE1 DATETIME       
     
DECLARE @TODATE DATETIME, @FROMDATE DATETIME         
DECLARE @RETURNPERIOD VARCHAR(50)      
      
DECLARE @TEMP TABLE      
 (      
  [DATEFROM] DATETIME,      
  [DATETO] DATETIME,
  [DATEFROM_UPFRONT] DATETIME,
  [DATETO_UPFRONT] DATETIME,  
  [MONTH] INT ,      
  [YEAR] INT       
 )      
      
 IF @TYPE='Q'      
 BEGIN      
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))    
      
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))      
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))      
      
   ;WITH DATESEQUENCE( [DATETO] ) AS        
   (         
   SELECT @FROMDATE AS [DATETO]         
   UNION ALL        
   SELECT DATEADD(MONTH, 3, [DATETO])         
   FROM DATESEQUENCE         
   WHERE [DATETO] < @TODATE         
   )       
      
   INSERT INTO @TEMP([DATEFROM],[DATETO],[DATEFROM_UPFRONT] ,[DATETO_UPFRONT] , [MONTH],[YEAR])
   SELECT  DISTINCT      
   --DATEADD(MONTH,-3,[DATETO]) AS [DATEFROM],      
   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-3,[DATETO])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-3,[DATETO])) = YEAR(@STARTDATE1))) THEN    
   @STARTDATE1 ELSE DATEADD(MONTH,-3,[DATETO]) END,    
   [DATETO] = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END,
   
   [DATEFROM_UPFRONT] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
   [DATETO_UPFRONT] = DATEADD(DAY,-1, DATEADD(MONTH,3, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,

   [MONTH] = CASE  WHEN [DATETO] > @TODATE       
   THEN DATEPART(MONTH,@TODATE) ELSE      
   DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,      
   --DATEPART(YEAR,[DATETO]) AS [YEAR]         
   [YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END  
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)      
         
   IF EXISTS (SELECT * FROM @TEMP  WHERE [MONTH] = @BILLINGMONTH AND [YEAR] = @BILLINGYEAR)
   BEGIN
		SET @ISBILLING =1
   END
   ELSE
   BEGIN
		SET @ISBILLING =0
   END   
 END      
      
 IF @TYPE='Y'      
 BEGIN      
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))     
      
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))      
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))      
      
   ;WITH DATESEQUENCE( [DATETO] ) AS        
   (         
   SELECT @FROMDATE AS [DATETO]         
   UNION ALL        
   SELECT DATEADD(MONTH, 12, [DATETO])         
   FROM DATESEQUENCE         
   WHERE [DATETO] < @TODATE         
   )       
      
   INSERT INTO @TEMP([DATEFROM],[DATETO],[DATEFROM_UPFRONT] ,[DATETO_UPFRONT] , [MONTH],[YEAR])
   SELECT  DISTINCT      
   --DATEADD(MONTH,-12,[DATETO]) AS [DATEFROM],      
   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-12,[DATETO])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-12,[DATETO])) = YEAR(@STARTDATE1))) THEN    
   @STARTDATE1 ELSE DATEADD(MONTH,-12,[DATETO]) END,    
   [DATETO] = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE  DATEADD(DAY,-1,[DATETO]) END,
   
   [DATEFROM_UPFRONT] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
   [DATETO_UPFRONT] = DATEADD(DAY,-1, DATEADD(MONTH,12, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,

   [MONTH] = CASE  WHEN [DATETO] > @TODATE       
   THEN DATEPART(MONTH,@TODATE) ELSE      
   DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,      
   --DATEPART(YEAR,[DATETO]) AS [YEAR]         
[YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END  
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)      
         
  IF EXISTS (SELECT * FROM @TEMP  WHERE [MONTH] = @BILLINGMONTH AND [YEAR] = @BILLINGYEAR)
   BEGIN
		SET @ISBILLING =1
   END
   ELSE
   BEGIN
		SET @ISBILLING =0
   END   
      
 END       
 IF @TYPE='H'      
 BEGIN      
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))    
      
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))      
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))      
      
 ;WITH DATESEQUENCE( [DATETO] ) AS        
   (         
   SELECT @FROMDATE AS [DATETO]         
   UNION ALL        
   SELECT DATEADD(MONTH, 6, [DATETO])         
   FROM DATESEQUENCE         
   WHERE [DATETO] < @TODATE         
   )       
      
   INSERT INTO @TEMP([DATEFROM],[DATETO],[DATEFROM_UPFRONT] ,[DATETO_UPFRONT] , [MONTH],[YEAR])
   SELECT  DISTINCT      
   --DATEADD(MONTH,-6,[DATETO]) AS [DATEFROM],      
   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-6,[DATETO])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-6,[DATETO])) = YEAR(@STARTDATE1))) THEN    
   @STARTDATE1 ELSE DATEADD(MONTH,-6,[DATETO]) END,    
   [DATETO] = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE  DATEADD(DAY,-1,[DATETO]) END,
   
   [DATEFROM_UPFRONT] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
   [DATETO_UPFRONT] = DATEADD(DAY,-1, DATEADD(MONTH,6, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,

   [MONTH] = CASE  WHEN [DATETO] > @TODATE       
   THEN DATEPART(MONTH,@TODATE) ELSE      
   DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,      
   --DATEPART(YEAR,[DATETO]) AS [YEAR]         
[YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END  
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)      
         
   IF EXISTS (SELECT * FROM @TEMP  WHERE [MONTH] = @BILLINGMONTH AND [YEAR] = @BILLINGYEAR)
   BEGIN
		SET @ISBILLING =1
   END
   ELSE
   BEGIN
		SET @ISBILLING =0
   END   
   
 END        
 IF @TYPE='M'      
 BEGIN      
   SET @STARTDATE1=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@EFFECTIVEDATE))      
   SET @STARTDATE= CONVERT(DATETIME,CONVERT(VARCHAR(15),CAST(YEAR(@STARTDATE) AS VARCHAR(4)) + '-' + CAST(MONTH(@STARTDATE)AS VARCHAR(2)) +'-'+CAST('01' AS VARCHAR(2))))    
      
   SET @FROMDATE = DATEADD(MONTH,1,CAST(@STARTDATE AS DATETIME))      
   SET @TODATE=CONVERT(DATETIME,CONVERT(VARCHAR(12),@ENDDATE))      
   --SELECT @FROMDATE      
   --SELECT @TODATE      
      
      
   ;WITH DATESEQUENCE( [DATETO] ) AS        
   (         
   SELECT @FROMDATE AS [DATETO]         
   UNION ALL        
   SELECT DATEADD(MONTH, 1, [DATETO])         
   FROM DATESEQUENCE         
   WHERE [DATETO] < @TODATE         
   )         
   INSERT INTO @TEMP([DATEFROM],[DATETO],[DATEFROM_UPFRONT] ,[DATETO_UPFRONT] , [MONTH],[YEAR])
   SELECT  DISTINCT      
   --DATEADD(MONTH,-1,[DATETO]) AS [DATEFROM],      
   [DATEFROM] = CASE WHEN ((MONTH(DATEADD(MONTH,-1,[DATETO])) = MONTH(@STARTDATE1)) AND (YEAR(DATEADD(MONTH,-1,[DATETO])) = YEAR(@STARTDATE1))) THEN    
   @STARTDATE1 ELSE DATEADD(MONTH,-1,[DATETO]) END,    
   [DATETO]  = CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END,      
   
   [DATEFROM_UPFRONT] =  DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ),
   [DATETO_UPFRONT] = DATEADD(DAY,-1, DATEADD(MONTH,1, DATEADD(DAY,(DAY(CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END)*-1)+1, CASE  WHEN [DATETO] > @TODATE THEN @TODATE ELSE DATEADD(DAY,-1,[DATETO]) END ))) ,

   [MONTH] = CASE WHEN [DATETO] > @TODATE THEN DATEPART(MONTH,@TODATE) ELSE DATEPART(MONTH,DATEADD(DAY,-1,[DATETO]))  END,      
   [YEAR]  = CASE WHEN [DATETO] > @TODATE THEN DATEPART(YEAR,@TODATE)  ELSE DATEPART(YEAR ,DATEADD(DAY,-1,[DATETO]))  END      
   FROM DATESEQUENCE OPTION (MAXRECURSION 10000)      
         
   IF EXISTS (SELECT * FROM @TEMP  WHERE [MONTH] = @BILLINGMONTH AND [YEAR] = @BILLINGYEAR)
   BEGIN
		SET @ISBILLING =1
   END
   ELSE
   BEGIN
		SET @ISBILLING =0
   END         
 END     
RETURN @ISBILLING         
END       
  
GO

/****** Object:  UserDefinedFunction [dbo].[FN_INC_ISBILLING_MONTH]    Script Date: 04/28/2011 15:48:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_ISBILLING_MONTH]
PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |20/09/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/
--SELECT DBO.[FN_ISBILLING_MONTH](5,4,'Q')

CREATE FUNCTION [dbo].[FN_INC_ISBILLING_MONTH]
(          
   @STARTMONTH INT,
   @BILLINGMONTH INT=NULL,
   @TYPE CHAR(1)=NULL
)
RETURNS BIT 
AS
BEGIN
        DECLARE @ISBILLING BIT    
	    IF @TYPE='Q'
			BEGIN
				DECLARE @BILLINGQUARTER_1 AS TINYINT
				DECLARE @BILLINGQUARTER_2 AS TINYINT
				DECLARE @BILLINGQUARTER_3 AS TINYINT
				DECLARE @BILLINGQUARTER_4 AS TINYINT
				SET @BILLINGQUARTER_1=@STARTMONTH

				IF (@BILLINGQUARTER_1+2) > 12
					BEGIN 
						SET @BILLINGQUARTER_2= (@BILLINGQUARTER_1+2) - 12
					END
				ELSE
					BEGIN
						SET @BILLINGQUARTER_2= (@BILLINGQUARTER_1+2)
					END
				IF (@BILLINGQUARTER_2+2) > 12
					BEGIN 
						SET @BILLINGQUARTER_3= (@BILLINGQUARTER_2+2) - 12
					END
				ELSE
					BEGIN
						SET @BILLINGQUARTER_3= (@BILLINGQUARTER_2+2)
					END

				IF (@BILLINGQUARTER_3+2) > 12
					BEGIN 
						SET @BILLINGQUARTER_4= (@BILLINGQUARTER_3+2) - 12
					END
				ELSE
					BEGIN
						SET @BILLINGQUARTER_4= (@BILLINGQUARTER_3+2)
					END
				IF @BILLINGQUARTER_1=@BILLINGMONTH OR @BILLINGQUARTER_2=@BILLINGMONTH OR @BILLINGQUARTER_3=@BILLINGMONTH OR @BILLINGQUARTER_4=@BILLINGMONTH 
					BEGIN
						SET @ISBILLING =1					
					END
				ELSE
					BEGIN
						SET @ISBILLING =0					
					END
			END
		IF @TYPE='H'			
			BEGIN				
				DECLARE @FIRSTHALF TINYINT
				DECLARE @SECONDHALF TINYINT
				SET @FIRSTHALF=@STARTMONTH
				IF (@FIRSTHALF + 6) > 12 
					BEGIN
						SET @SECONDHALF=(@FIRSTHALF + 6) - 12
					END
				ELSE
					BEGIN
						SET @SECONDHALF=@FIRSTHALF + 6 
					END

				IF @FIRSTHALF=@BILLINGMONTH OR @SECONDHALF=@BILLINGMONTH
					BEGIN
						SET @ISBILLING =1					
					END
				ELSE
					BEGIN
						SET @ISBILLING =0					
					END

			END
			IF @TYPE='Y'					
			BEGIN
			   IF @STARTMONTH = @BILLINGMONTH 
				  BEGIN
					SET @ISBILLING =1
				  END	
				ELSE
				  BEGIN
					SET @ISBILLING =0
				  END
			END
			RETURN @ISBILLING

END











GO

/****** Object:  UserDefinedFunction [dbo].[FN_GETPARTICIPANTMARKS]    Script Date: 04/28/2011 15:48:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



  
/*            
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.            
'********************************************************************************************            
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART            
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE            
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS            
'********************************************************************************************            
NAME: [FN_GETPARTICIPANTMARKS]
PURPOSE: THIS FUNCTION RETURNS Agency Contact Person.      
|--------|--------------------------------------------------------------|      
|SL. NO. |DATE   |DEVELOPER’S NAME   |ACTIVITY   |      
|-----------------------------------------------------------------------|      
|1.   |27/01/2008 |NEERAJ GOSWAMI    |CREATION   |      
|-----------------------------------------------------------------------|      

SELECT [dbo].[FN_GETPARTICIPANTMARKS] (100040151)
*/      
      
CREATE FUNCTION [dbo].[FN_GETPARTICIPANTMARKS]
(                
            @TR_COURSEP_ID   INT      
)      

RETURNS VARCHAR(200)
AS  
BEGIN      
 DECLARE @BUFFER INT

 SELECT @BUFFER = COUNT(*) FROM T_TR_STAFF_TEST WITH (NOLOCK) WHERE STAFF_ID = @TR_COURSEP_ID  
  
 RETURN @BUFFER      
END  








GO

/****** Object:  UserDefinedFunction [dbo].[FN_GETOFFICEID]    Script Date: 04/28/2011 15:48:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_GETOFFICEID]
PURPOSE: THIS FUNCTION RETURNS NEXT OFFICEID NUMBER.      
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |17/01/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|

*/
CREATE FUNCTION [dbo].[FN_GETOFFICEID]
(          
	@INTERNETOFFICE2TO9 VARCHAR(7),
	@OFFICEIDTYPENAME CHAR(35)
)
RETURNS VARCHAR(8000)
AS

BEGIN
	DECLARE @FIRSTCHAR CHAR(1)
	DECLARE @LASTCHAR CHAR(1)
	DECLARE @MIDDLECHAR CHAR(1)
	DECLARE @NEXTNUMBER CHAR(3)
	--SET @INTERNETOFFICE2TO9 = '8AA-8ZZ'
	SET @NEXTNUMBER=left(@INTERNETOFFICE2TO9 ,3)						

	SET @FIRSTCHAR=LEFT(@NEXTNUMBER,1)
	SET @LASTCHAR=RIGHT(@NEXTNUMBER,1)
	SET @MIDDLECHAR=SUBSTRING(@NEXTNUMBER,2,1)	
	IF @OFFICEIDTYPENAME='TOWN OFFICE'
		BEGIN
			IF @MIDDLECHAR='Z' AND  @LASTCHAR='Z'  AND CONVERT(INT,@FIRSTCHAR) <=6
				BEGIN
					SET @FIRSTCHAR=CONVERT(VARCHAR(1),CONVERT(INT,@FIRSTCHAR) + 1)
				END
		END
	IF @OFFICEIDTYPENAME='TRAINING OFFICE'
		BEGIN
			IF ASCII(@LASTCHAR) =90
				BEGIN
					SET @LASTCHAR= CHAR(65)
				END
			ELSE
				BEGIN
					SET @LASTCHAR= CHAR(ASCII(@LASTCHAR)  + 1)
				END
				SET @NEXTNUMBER=@FIRSTCHAR +@MIDDLECHAR+@LASTCHAR				
		END
	ELSE
		BEGIN
			IF (ASCII(@MIDDLECHAR) = 90 AND ASCII(@LASTCHAR) =90)
				BEGIN
					SET @MIDDLECHAR= CHAR(65)
					SET @LASTCHAR= CHAR(65)
					SET @NEXTNUMBER=@FIRSTCHAR +@MIDDLECHAR+@LASTCHAR
				END
			ELSE
				BEGIN
						IF (ASCII(@MIDDLECHAR) <= 90 AND ASCII(@LASTCHAR) <= 89)
							BEGIN				
								SET @LASTCHAR= CHAR(ASCII(@LASTCHAR)  + 1)				
								SET @NEXTNUMBER=@FIRSTCHAR +@MIDDLECHAR+@LASTCHAR												
							END
						ELSE
							BEGIN
								IF ASCII(@LASTCHAR) = 90
									BEGIN
										SET @LASTCHAR= CHAR(65)
										SET @MIDDLECHAR= CHAR(ASCII(@MIDDLECHAR)  + 1)						
										SET @NEXTNUMBER=@FIRSTCHAR +@MIDDLECHAR+@LASTCHAR								
									END				
							END

				END
			END
	RETURN CONVERT(VARCHAR(3),@NEXTNUMBER)
END

			



















GO

/****** Object:  UserDefinedFunction [dbo].[FN_GETISP_RENTALCHARGES]    Script Date: 04/28/2011 15:48:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_ISBILLING_MONTH]
PURPOSE: THIS FUNCTION CHECKS IF SPECIFIED MONTH IS BILLING MONTH OR NOT
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |22/09/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/
--SELECT DBO.[FN_GETISP_RENTALCHARGES]('2008-06-01 00:00:00.000','2008-08-28 00:00:00.000','Q')
--EXEC [FN_GETISP_RENTALCHARGES] '2008-06-01 00:00:00.000','2008-08-28 00:00:00.000','Q'
CREATE FUNCTION [dbo].[FN_GETISP_RENTALCHARGES]
(          
   @STARTDATE DATETIME='2008-06-01 00:00:00.000',
   @ENDDATE DATETIME='2008-08-28 00:00:00.000',   
   @MONTHLYCHARGES DECIMAL(18,2)=NULL	
 
)
RETURNS DECIMAL(18,2)
AS
BEGIN
	DECLARE @RENTALCHARGES DECIMAL(18,2)
	DECLARE @NO_OF_MONTHS INT
	DECLARE @NO_OF_DAYS INT
	DECLARE @MAXDAYS INT
	SET @RENTALCHARGES=0.0
	BEGIN
		IF ISNULL(@MONTHLYCHARGES,0)=0
			BEGIN
				SET @RENTALCHARGES=0.0
			END
		ELSE
			BEGIN
				SET @NO_OF_MONTHS=DATEDIFF(MONTH,@STARTDATE,@ENDDATE)					
				--SELECT @NO_OF_MONTHS
				SET @RENTALCHARGES=@MONTHLYCHARGES*@NO_OF_MONTHS
				--PRINT @RENTALCHARGES
				SET @NO_OF_DAYS=DATEDIFF(DAY,(DATEADD(m,DATEDIFF(MONTH,@STARTDATE,@ENDDATE),@STARTDATE)),@ENDDATE) + 1										
				--SELECT @NO_OF_DAYS
				--PRINT (CONVERT(DECIMAL(18,2),@MONTHLYCHARGES )/ CONVERT(DECIMAL,dbo.DaysInMonth(@ENDDATE)))
				SET @RENTALCHARGES=(@RENTALCHARGES + ((CONVERT(DECIMAL(18,2),@MONTHLYCHARGES )/ CONVERT(DECIMAL,dbo.DaysInMonth(@ENDDATE)))) * @NO_OF_DAYS)				
				--PRINT @RENTALCHARGES
			END			
	END
	RETURN @RENTALCHARGES

END











GO

/****** Object:  UserDefinedFunction [dbo].[FN_GETIPADDRESSLIST]    Script Date: 04/28/2011 15:48:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_GETIPADDRESSLIST]
PURPOSE: THIS FUNCTION RETURNS COMMA CONCATENATED IPADDRESS LIST.
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |17/11/2007  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/

CREATE FUNCTION [dbo].[FN_GETIPADDRESSLIST]
(          
            @POOLID                        INT
)
RETURNS VARCHAR(8000)
AS
BEGIN
            DECLARE @BUFFER VARCHAR(8000)
            SELECT   @BUFFER = ISNULL(@BUFFER,'') + ', ' + RTRIM(LTRIM(ISNULL(IPADDRESS,'')))
                        FROM    T_G_IP_POOL_DETAILS
                        WHERE POOLID = @POOLID
            RETURN STUFF(@BUFFER,1,1,'') 

END











GO

/****** Object:  UserDefinedFunction [dbo].[FN_GETIMMEDIATESUPERVISOREMAIL]    Script Date: 04/28/2011 15:48:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




    
    
/*              
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.              
'********************************************************************************************              
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART              
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE              
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS              
'********************************************************************************************              
NAME: [FN_GETAGENCYCONTACTPERSON]        
PURPOSE: THIS FUNCTION RETURNS Agency Contact Person.        
|--------|--------------------------------------------------------------|        
|SL. NO. |DATE   |DEVELOPER’S NAME   |ACTIVITY   |        
|-----------------------------------------------------------------------|        
|1.   |21/04/2010 |NEERAJ GOSWAMI    |CREATION   |        
|-----------------------------------------------------------------------|        
  
SELECT * FROM T_G_EMPLOYEES WHERE EMPLOYEEID= 202709  
  
SELECT * FROM T_G_EMPLOYEES WHERE EMPLOYEEID = 8193  
SELECT * FROM T_G_EMPLOYEES WHERE EMPLOYEE_NAME LIKE '%bratati%' --200454
SELECT * FROM T_G_EMPLOYEES WHERE EMPLOYEEID =301
SELECT * FROM T_G_EMPLOYEES WHERE EMPLOYEEID =200454

SELECT DBO.FN_GETIMMEDIATESUPERVISOREMAIL(200454)

  
*/        
        
CREATE FUNCTION [dbo].[FN_GETIMMEDIATESUPERVISOREMAIL]
(                  
            @EMPLOYEEID   INT  
)        
RETURNS VARCHAR(200)        
AS    
BEGIN        
 DECLARE @BUFFER VARCHAR(200)  
 DECLARE @SUPERVISORYEMPLOYEEID INT  
  
 SELECT @SUPERVISORYEMPLOYEEID= IMMEDIATESUPERVISORID FROM T_G_EMPLOYEES WITH(NOLOCK) WHERE EMPLOYEEID = @EMPLOYEEID
  
 IF @SUPERVISORYEMPLOYEEID IS NOT NULL   
 BEGIN  
  SELECT @BUFFER= EMAIL FROM T_G_EMPLOYEES WITH(NOLOCK) WHERE EMPLOYEEID = @SUPERVISORYEMPLOYEEID  
 END    
 RETURN @BUFFER  
END  
    
GO

/****** Object:  UserDefinedFunction [dbo].[FN_GETHISTORY]    Script Date: 04/28/2011 15:48:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_GETHISTORY]
PURPOSE: THIS FUNCTION RETURNS NEXT OFFICEID NUMBER.      
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |18/08/2009  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|

*/
CREATE FUNCTION [dbo].[FN_GETHISTORY]
( 
	@NAME VARCHAR(100) ,        
	@VALUE_OLD VARCHAR(MAX),
	@VALUE_NEW VARCHAR(MAX)
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @BUFFER VARCHAR(MAX)
	IF ISNULL(@VALUE_OLD,'')<>ISNULL(@VALUE_NEW,'')
		BEGIN
				SET @BUFFER=LTRIM(RTRIM(UPPER(LEFT(@NAME,1))+SUBSTRING(LOWER(REPLACE(@NAME,'_',' ')),2,LEN(@NAME)-1) +':- ' + ISNULL(@VALUE_OLD,'') +' to ' + ISNULL(@VALUE_NEW,''))) + ' ,'
		END
	ELSE
		BEGIN
			SET @BUFFER=''			
		END
	RETURN 	@BUFFER
END

			




















GO

/****** Object:  UserDefinedFunction [dbo].[FN_GETGROUPEMAILID]    Script Date: 04/28/2011 15:48:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_GETGROUPEMAILID]
PURPOSE: THIS FUNCTION RETURNS COMMA CONCATENATED IPADDRESS LIST.
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |12/08/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/

CREATE FUNCTION [dbo].[FN_GETGROUPEMAILID]
(          
            @GROUPID   INT
)
RETURNS VARCHAR(8000)
AS
BEGIN
            DECLARE @BUFFER VARCHAR(8000)
            SELECT   @BUFFER = ISNULL(@BUFFER,'') + ' ,' + RTRIM(LTRIM(ISNULL(EMAIL,'')))
                        FROM    T_G_EMAIL_GROUP_DETAILS
                        WHERE GROUPID = @GROUPID
            RETURN STUFF(@BUFFER,1,1,'') 

END


GO

/****** Object:  UserDefinedFunction [dbo].[FN_GETCONTACTPERSONEMAIL]    Script Date: 04/28/2011 15:48:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*          
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.          
'********************************************************************************************          
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART          
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE          
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS          
'********************************************************************************************          
NAME: [FN_GETAGENCYCONTACTPERSON]    
PURPOSE: THIS FUNCTION RETURNS Agency Contact Person.    
|--------|--------------------------------------------------------------|    
|SL. NO. |DATE   |DEVELOPER’S NAME   |ACTIVITY   |    
|-----------------------------------------------------------------------|    
|1.   |30/08/2008 |NEERAJ GOSWAMI    |CREATION   |    
|-----------------------------------------------------------------------|    
*/    
    
CREATE FUNCTION [dbo].[FN_GETCONTACTPERSONEMAIL]    
(              
            @CONTACT_PERSON_ID   INT    
)    
RETURNS VARCHAR(200)    
AS
BEGIN    
 DECLARE @BUFFER VARCHAR(200)    
 declare @LCODE	bigint
  
 SELECT @BUFFER  = EMAIL FROM T_C_STAFF WHERE AGENCYSTAFFID = @CONTACT_PERSON_ID   
 SELECT @LCODE  = LCODE FROM T_C_STAFF WHERE AGENCYSTAFFID = @CONTACT_PERSON_ID   

IF @BUFFER IS NULL
BEGIN
	--SELECT  @BUFFER  = EMAIL  FROM T_C_STAFF WHERE LCODE = @LCODE AND RESPONSIBLE =1	

	SELECT @BUFFER  = EMAIL  FROM T_C_STAFF WHERE AGENCYSTAFFID IN (
	SELECT CONTACT_PERSON_ID FROM LOCATION_MASTER WHERE LOCATION_CODE = @LCODE)

END

 RETURN @BUFFER    
END


GO

/****** Object:  UserDefinedFunction [dbo].[FN_GETAGENCYCONTACTPERSON]    Script Date: 04/28/2011 15:48:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_GETAGENCYCONTACTPERSON]
PURPOSE: THIS FUNCTION RETURNS Agency Contact Person.
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |26/08/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/

CREATE FUNCTION [dbo].[FN_GETAGENCYCONTACTPERSON]
(          
            @LCODE   INT
)
RETURNS VARCHAR(200)
AS
BEGIN
	DECLARE @BUFFER VARCHAR(200)
	SELECT @BUFFER = STAFF.STAFFNAME 
	FROM LOCATION_MASTER LM WITH (NOLOCK)
	LEFT OUTER JOIN T_C_STAFF STAFF ON LM.CONTACT_PERSON_ID=STAFF.AGENCYSTAFFID
	WHERE LM.LOCATION_CODE=@LCODE
	RETURN @BUFFER
END


GO

/****** Object:  UserDefinedFunction [dbo].[FN_GET_VENDERSERIALNO]    Script Date: 04/28/2011 15:48:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_GET_VENDERSERIALNO]
PURPOSE: THIS FUNCTION RETURNS COMMA CONCATENATED IPADDRESS LIST.
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |25/03/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/

CREATE FUNCTION [dbo].[FN_GET_VENDERSERIALNO]
(          
            @CHALLANID BIGINT,
			@PRODUCTID INT,
			@TYPE INT					
)
RETURNS VARCHAR(8000)
AS
BEGIN	
		DECLARE @BUFFER VARCHAR(8000)
		IF @TYPE=1
			BEGIN		
				SELECT   @BUFFER = ISNULL(@BUFFER,'') + ',' + RTRIM(LTRIM(ISNULL(SERIALNUMBER,''))) FROM T_CHALLAN_PLIST
				WHERE CHALLANID=@CHALLANID AND PRODUCTID=@PRODUCTID			
			END
		ELSE
			BEGIN
				SELECT   @BUFFER = ISNULL(@BUFFER,'') + ',' + RTRIM(LTRIM(ISNULL(VenderSerialNo,''))) FROM T_CHALLAN_PLIST
				WHERE CHALLANID=@CHALLANID AND PRODUCTID=@PRODUCTID			
			END
	RETURN STUFF(@BUFFER,1,1,'') 

END


GO

/****** Object:  UserDefinedFunction [dbo].[FN_GET_SIGNATORY]    Script Date: 04/28/2011 15:48:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


  
 /*        
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.        
'********************************************************************************************        
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART        
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE        
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS        
'********************************************************************************************        
NAME: [FN_GETAGENCYCONTACTPERSON]  
PURPOSE: THIS FUNCTION RETURNS Agency Contact Person.  
|--------|--------------------------------------------------------------|  
|SL. NO. |DATE    |DEVELOPER’S NAME  |ACTIVITY     |  
|-----------------------------------------------------------------------|  
|1.   |26/08/2008  |TAPAN NATH           |CREATION     |  
|-----------------------------------------------------------------------|  

SELECT DBO.FN_GET_SIGNATORY('DEL',0)
SELECT DBO.FN_GET_SIGNATORY('DEL',1)



*/  
  
CREATE FUNCTION [dbo].[FN_GET_SIGNATORY]
(            
            @AOFFICE   VARCHAR(3)  ,
			@FLAG	INT
)  
RETURNS VARCHAR(200)  
AS  
BEGIN  
 DECLARE @BUFFER VARCHAR(200)  
		IF @FLAG =0
		BEGIN
			SELECT 	TOP 1
			@BUFFER = T_G_EMPLOYEES.EMPLOYEE_NAME 
			FROM T_G_DOCUMENTS , T_G_DOC_EMPLOYEES , T_G_EMPLOYEES
			WHERE T_G_DOCUMENTS.DOCUMENTID = T_G_DOC_EMPLOYEES.DOCUMENTID
			AND T_G_EMPLOYEES.EMPLOYEEID = T_G_DOC_EMPLOYEES.EMPLOYEEID	
			AND (@AOFFICE IS NULL OR T_G_EMPLOYEES.AOFFICE = @AOFFICE)		
		END
		ELSE IF @FLAG=1
		BEGIN			
			SELECT 	TOP 1	
			@BUFFER = T_G_EMPLOYEES.DESIGNATION
			FROM T_G_DOCUMENTS , T_G_DOC_EMPLOYEES , T_G_EMPLOYEES
			WHERE T_G_DOCUMENTS.DOCUMENTID = T_G_DOC_EMPLOYEES.DOCUMENTID
			AND T_G_EMPLOYEES.EMPLOYEEID = T_G_DOC_EMPLOYEES.EMPLOYEEID	
			AND (@AOFFICE IS NULL OR T_G_EMPLOYEES.AOFFICE = @AOFFICE)		
		END

 RETURN @BUFFER  
END  
  
  
  
  
  
  
  
  
  
  

GO

/****** Object:  UserDefinedFunction [dbo].[FN_GET_PARTICIPANT_MARKS]    Script Date: 04/28/2011 15:48:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




  
      
/*                
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.                
'********************************************************************************************                
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART                
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE                
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS                
'********************************************************************************************                
NAME: [FN_GETPARTICIPANTMARKS]    
PURPOSE: THIS FUNCTION RETURNS AGENCY CONTACT PERSON.          
|--------|--------------------------------------------------------------|          
|SL. NO. |DATE   |DEVELOPER’S NAME   |ACTIVITY   |          
|-----------------------------------------------------------------------|          
|1.   |27/01/2008 |NEERAJ GOSWAMI    |CREATION   |          
|-----------------------------------------------------------------------|          
    
SELECT [DBO].[FN_GETPARTICIPANTMARKS] (100040151)    
*/          
          
CREATE FUNCTION [dbo].[FN_GET_PARTICIPANT_MARKS]  
(                    
            @TR_COURSEP_ID   INT        ,  
   @FLAG INT  
)          
    
RETURNS BIGINT    
AS      
BEGIN          
  
DECLARE @MARKS BIGINT  
SET @MARKS = 0  
IF @FLAG = 1  
BEGIN  
 SELECT @MARKS=SUM(ISNULL(TOTAL_TEST_MARKS,0))  FROM T_TR_STAFF_TEST WHERE STAFF_ID=@TR_COURSEP_ID   
   
 --SELECT ISNULL(@TOTAL_TEST_MARKS,0) AS TOTAL_TEST_MARKS , ISNULL(@TR_PRACTICAL_MARKS,0) AS TR_PRACTICAL_MARKS  
END  
ELSE IF @FLAG = 2  
BEGIN  
IF EXISTS (SELECT TOP 1   TR_PRACTICAL_MARKS FROM  T_TR_STAFF_TEST WHERE STAFF_ID=@TR_COURSEP_ID  )
BEGIN
 SELECT TOP 1 @MARKS=  TR_PRACTICAL_MARKS FROM  T_TR_STAFF_TEST WHERE STAFF_ID=@TR_COURSEP_ID  
END
ELSE
BEGIN

SELECT @MARKS=TR_TOTAL_PRACTICAL_MARKS FROM T_TR_PARTICIPANTS WHERE TR_COURSEP_ID=@TR_COURSEP_ID 
	--SELECT  @MARKS=  TR_PRACTICAL_MARKS FROM  T_TR_COURSE 
	--WHERE TR_COURSE_ID IN (SELECT TR_COURSE_ID FROM T_TR_COURSE_SESSION WHERE TR_COURSES_ID IN (SELECT TR_COURSES_ID FROM T_TR_PARTICIPANTS WHERE TR_COURSEP_ID=@TR_COURSEP_ID ) )
END
END      
 RETURN @MARKS  
  
END      

/*
SELECT TOP 100 * FROM T_TR_PARTICIPANTS ORDER BY 1 DESC


SELECT TOP 100 * FROM T_TR_COURSE WHERE TR_PRACTICAL_MARKS IS NOT NULL ORDER BY 1 DESC
    
    */
    
    
    



GO

/****** Object:  UserDefinedFunction [dbo].[FN_GET_AIRLINEDATA_ID]    Script Date: 04/28/2011 15:48:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_GET_VENDERSERIALNO]
PURPOSE: THIS FUNCTION RETURNS COMMA CONCATENATED IPADDRESS LIST.
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |25/03/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/

CREATE FUNCTION [dbo].[FN_GET_AIRLINEDATA_ID]
(          
            @BC_ID INT,
			@INC_PLAN_ID INT			
)
RETURNS VARCHAR(8000)
AS
BEGIN	
	DECLARE @BUFFER VARCHAR(8000)
	SET @BUFFER=''
	SELECT  @BUFFER = @BUFFER+ RTRIM(LTRIM(ISNULL(NF.NIDT_FIELDS_ID,''))) + ','
	FROM T_INC_BC_INCENTIVE_PLAN_FIELDS PF WITH(NOLOCK)
	INNER JOIN T_INC_NIDT_FIELDS NF WITH(NOLOCK) ON PF.NIDT_FIELDS_ID=NF.NIDT_FIELDS_ID
	INNER JOIN T_INC_BC_INCENTIVE_PLAN P WITH(NOLOCK) ON P.INC_PLAN_ID=PF.INC_PLAN_ID
	WHERE P.BC_ID=@BC_ID AND PF.INC_PLAN_ID=@INC_PLAN_ID
	--RETURN @BUFFER
	SET @BUFFER=LTRIM(RTRIM(@BUFFER))
	RETURN SUBSTRING(@BUFFER,1,LEN(@BUFFER)-1)	
	--RETURN STUFF(@BUFFER,1,1,'') 
END


GO

/****** Object:  UserDefinedFunction [dbo].[FN_GET_AIRLINEDATA]    Script Date: 04/28/2011 15:48:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_GET_VENDERSERIALNO]
PURPOSE: THIS FUNCTION RETURNS COMMA CONCATENATED IPADDRESS LIST.
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |25/03/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/

CREATE FUNCTION [dbo].[FN_GET_AIRLINEDATA]
(          
            @BC_ID INT,
			@INC_PLAN_ID INT			
)
RETURNS VARCHAR(8000)
AS
BEGIN	
	DECLARE @BUFFER VARCHAR(8000)
	SELECT  @BUFFER = ISNULL(@BUFFER,'') + ',' + RTRIM(LTRIM(ISNULL(NF.NIDT_FIELDS_ALIAS,'')))
	FROM T_INC_BC_INCENTIVE_PLAN_FIELDS PF WITH(NOLOCK)
	INNER JOIN T_INC_NIDT_FIELDS NF WITH(NOLOCK) ON PF.NIDT_FIELDS_ID=NF.NIDT_FIELDS_ID
	INNER JOIN T_INC_BC_INCENTIVE_PLAN P WITH(NOLOCK) ON P.INC_PLAN_ID=PF.INC_PLAN_ID
	WHERE P.BC_ID=@BC_ID AND PF.INC_PLAN_ID=@INC_PLAN_ID
	RETURN STUFF(@BUFFER,1,1,'') 
END


GO

/****** Object:  UserDefinedFunction [dbo].[FN_FORMAT_DATETIME]    Script Date: 04/28/2011 15:48:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_FORMAT_DATETIME]
PURPOSE: THIS FUNCTION CONVERTS DATE to THE FORMAT (DD-Mon-YY HH(24):MI, DD-MM-YY hh24:mi)
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |10/03/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/

CREATE FUNCTION [dbo].[FN_FORMAT_DATETIME]
(          
   @DATE DATETIME,
   @TYPE INT=1	
)
RETURNS VARCHAR(20)
AS
BEGIN
		DECLARE @BUFFER VARCHAR(20)
		IF @TYPE=1 --DD-Mon-YY hh24:mi
			BEGIN				
				SELECT   @BUFFER = replace(CONVERT(varchar,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,@DATE)),6),' ' , '-') + ' ' + LEFT(CONVERT(varchar,CONVERT(DATETIME,CONVERT(VARCHAR,@DATE)),108),5)
			END
		IF @TYPE=2 --DD/MM/YY hh24:mi		
			BEGIN
				SELECT   @BUFFER = CONVERT(varchar,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,@DATE)),103) + ' ' + LEFT(CONVERT(varchar,CONVERT(DATETIME,CONVERT(VARCHAR,@DATE)),108),5)
			END
		RETURN @BUFFER
END



















GO

/****** Object:  UserDefinedFunction [dbo].[FN_CONVERTINT_TO_DATE]    Script Date: 04/28/2011 15:48:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [FN_CONVERTINT_TO_DATE]
PURPOSE: THIS FUNCTION CONVERTS INTEGER TO DATE (FORMAT DD-Mon-YY)
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |04/03/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/

CREATE FUNCTION [dbo].[FN_CONVERTINT_TO_DATE]
(          
   @DATE INT
)
RETURNS VARCHAR(20)
AS
BEGIN
            DECLARE @BUFFER VARCHAR(9)
            SELECT   @BUFFER = replace(CONVERT(varchar,CONVERT(SMALLDATETIME,CONVERT(VARCHAR,@DATE)),6),' ' , '-')
            RETURN @BUFFER
END








GO

/****** Object:  UserDefinedFunction [dbo].[FN_CALL_DURATION_HH:MI]    Script Date: 04/28/2011 15:48:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


  
 /*        
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.        
'********************************************************************************************        
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART        
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE        
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS        
'********************************************************************************************        
NAME: [FN_GETAGENCYCONTACTPERSON]  
PURPOSE: THIS FUNCTION RETURNS Agency Contact Person.  
|--------|--------------------------------------------------------------|  
|SL. NO. |DATE    |DEVELOPER’S NAME  |ACTIVITY     |  
|-----------------------------------------------------------------------|  
|1.   |26/08/2008  |TAPAN NATH           |CREATION     |  
|-----------------------------------------------------------------------|  
*/  
  
CREATE FUNCTION [dbo].[FN_CALL_DURATION_HH:MI]
(            
	@STARTDATE DATETIME,
	@ENDDATE DATETIME
)  
RETURNS VARCHAR(200)  
AS  
BEGIN   
	DECLARE @CALLDURATION VARCHAR(20)
	set @CALLDURATION=''
	DECLARE @SCD AS FLOAT
	DECLARE @HH AS INT
	DECLARE @MIN AS INT
	DECLARE @SS AS BIGINT
	DECLARE @HHFORMAT INT	
	SET @HHFORMAT=1

	SELECT @SCD=DATEDIFF ( "SS" , @STARTDATE , @ENDDATE )
	SELECT @HH=(CAST(@SCD AS FLOAT) / 60) / 60 
	SET @HHFORMAT=CASE WHEN LEN(CONVERT(VARCHAR,@HH))=1 THEN 2 ELSE LEN(CONVERT(VARCHAR,@HH)) END
	--SELECT @HH

	--GET MINUTES
	SELECT @MIN=( CAST(@SCD AS FLOAT)-  (@HH * 60)*60 ) / 60
	--SELECT @MIN

	--GET SECONDS
	SELECT @SS= CAST(@SCD AS FLOAT) - (((@HH*60)*60) + (@MIN * 60))
	--SELECT @SS

	IF @SS > 29 
	BEGIN
		SET @MIN=@MIN+1
	END
	
	--SELECT @MIN
	--SET @CALLDURATION=RIGHT(REPLICATE('0',2) + CAST(@HH AS VARCHAR(2)),2) + ':' + RIGHT(REPLICATE('0',2) + CAST(@MIN AS VARCHAR(2)),2)
	SET @CALLDURATION=RIGHT(REPLICATE('0',@HHFORMAT) + CAST(@HH AS VARCHAR),@HHFORMAT) + RIGHT(REPLICATE('0',2) + CAST(@MIN AS VARCHAR(2)),2)
	RETURN LTRIM(RTRIM(@CALLDURATION))
END  
  
  


  
  
  
  
  
  
  
  


GO

/****** Object:  UserDefinedFunction [dbo].[FirstDayOfMonth]    Script Date: 04/28/2011 15:48:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: DAYSINMONTH
PURPOSE: THIS FUNCTION RETURNS FIRST DAY OF A MONTH
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |24/09/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/
CREATE FUNCTION [dbo].[FirstDayOfMonth]
( @SDate datetime )
RETURNS datetime
AS
BEGIN
    RETURN (CAST(STR(MONTH(@SDate)) + '/' + STR(01)
     + '/' + STR(YEAR(@SDate)) AS DateTime))
END



GO

/****** Object:  UserDefinedFunction [dbo].[DaysInMonth]    Script Date: 04/28/2011 15:48:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: DAYSINMONTH
PURPOSE: THIS FUNCTION RETURNS MAX DAY IN A MONTH
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |19/09/2008  |TAPAN NATH           |CREATION					|
|-----------------------------------------------------------------------|
*/
CREATE FUNCTION [dbo].[DaysInMonth](@SDATE DATETIME)
 RETURNS INT 
AS
BEGIN 
  RETURN(SELECT DAY(DATEADD(MONTH, 1, @SDATE) 
  - DAY(DATEADD(MONTH, 1, @SDATE)))) 
END

GO

/****** Object:  UserDefinedFunction [dbo].[CheckOwnAgency]    Script Date: 04/28/2011 15:48:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 /*      
'COPYRIGHT NOTICE: Ã 2007 BY BIRD INFORMATION SYSTEMS ALL RIGHTS RESERVED.      
'********************************************************************************************      
' THIS FILE CONTAINS TRADE SECRETS OF BIRD INFORMATION SYSTEMS NO PART      
' MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM BY ANY MEANS OR FOR ANY PURPOSE      
' WITHOUT THE EXPRESS WRITTEN PERMISSION OF BIRD INFORMATION SYSTEMS      
'********************************************************************************************      
NAME: [CHECKOWNAGENCY]
PURPOSE: THIS ROUTINE CHECKS IF USER IS HAS LIMITED_TO_AGENCY RIGHTS OR NOT      
|--------|--------------------------------------------------------------|
|SL. NO. |DATE		  |DEVELOPER’S NAME		|ACTIVITY					|
|-----------------------------------------------------------------------|
|1.		 |			  |			           |CREATION					|
|-----------------------------------------------------------------------|

*/

CREATE FUNCTION [dbo].[CheckOwnAgency]  (@EMPLOYEEID AS INTEGER)  
RETURNS BIT  
AS  
BEGIN  
DECLARE @OWNAGENCY AS BIT  
SELECT @OWNAGENCY = LIMITED_TO_OWNAGENCY FROM T_G_EMPLOYEES WITH(NOLOCK) WHERE EMPLOYEEID = @EMPLOYEEID  
RETURN(@OWNAGENCY)  
 IF EXISTS(SELECT * FROM T_G_EMPLOYEES WITH(NOLOCK) WHERE EMPLOYEEID = @EMPLOYEEID)  
  BEGIN  
    SELECT @OWNAGENCY = LIMITED_TO_OWNAGENCY FROM T_G_EMPLOYEES WITH(NOLOCK) WHERE EMPLOYEEID = @EMPLOYEEID  
  END  
 ELSE  
    BEGIN  
     SET @OWNAGENCY= 0  
    END  
 RETURN @OWNAGENCY  
END  
  









GO


